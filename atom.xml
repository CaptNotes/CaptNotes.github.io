<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>机长梦话</title>
  
  <subtitle>不会拍电影的程序员不是好机长</subtitle>
  <link href="https://captnotes.com/atom.xml" rel="self"/>
  
  <link href="https://captnotes.com/"/>
  <updated>2023-08-01T15:59:34.337Z</updated>
  <id>https://captnotes.com/</id>
  
  <author>
    <name>麦机长</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>嗔 - 创业十忌</title>
    <link href="https://captnotes.com/anger-ttos/"/>
    <id>https://captnotes.com/anger-ttos/</id>
    <published>2023-06-01T09:48:02.000Z</published>
    <updated>2023-08-01T15:59:34.337Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_anger_ttos.jpg" alt="嗔 - 创业十忌"></p><blockquote><p>嗔：嗔怒、嗔诟、嗔责。</p></blockquote><p>很多创始人通常会有两副面孔，一副用来面对投资人、大客户，一幅则是面对员工跟合作伙伴的。而一个人的领袖魅力恰恰与这两幅面孔的反差程度成反比。</p><p>职场上充斥着“演员”，每个人都在极力塑造自认为更符合角色要求的形象。从微观上感受，就是喜欢和不喜欢、服与不服的区别；而从宏观上来看，似乎总显得太多自由发挥、缺少了些章法。行情走高的时候还则罢了，退潮过后，才能看出谁是随波逐流，谁才是真有两把刷子。</p><p>创立一番事业，需要内心有一番按耐不住的冲动，然而心中有冲动的人，也容易比较情绪化。情绪化又是一把伤人的利器，这其中如何平衡以取得好的心态，似乎是很矛盾的，值得探讨。</p><p>为什么情绪化容易伤人，因为情绪化输出的往往只有焦虑和指责，对于解决问题毫无裨益。举个例子，因为某个细节问题，团队掉坑，进度不如预期的乐观。创始人开始不耐烦了，一边催促尽快搞定，一边对参与的同事评头论足、指手画脚，背地里琢磨如何把这些人优（pái）化（jǐ）掉，找个会念经的外来和尚取而代之。而这样的创始人很容易就陷进死循环出不来，直到黄摊儿，复盘便是：都怪尔等误朕。</p><p>不少团队就像流水席一样，没什么“老人”。这样的队伍其实是没什么战斗力的，只不过钱还没烧完而已。把观众当傻子的导演拍不出好看的作品，把员工当傻子的创始人也做不出像样的企业。</p><p>前些年流行一个说法：和相亲对象吃饭，不要只看他如何对你，关键要看他如何对待服务员。同样的，创始人能够在事业上和你一起走多远，不要只看他在金主面前是不是知书达理的小绵羊，还要看他在员工面前是否是凶神恶煞的大灰狼。</p><p>有的人会说：当领导的怎么可以没有威严，和下属平起平坐那还了得？这就要看对“威严”如何定义了，威严既可以来自脾气大、嗓门粗，也可以来自扎实的专业功底和过人的远见卓识。</p><p>凡事都做好预案，为不确定因素预留出缓冲空间，才能保持相对积极乐观的心态。如果你想通过创新在市场上立足，那就不能天真地指望所有人不犯错，更不要做不到表率全靠“气场”来推进。</p><p>很多人输在，越走越没人愿意和他一起走。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_anger_ttos.jpg&quot; alt=&quot;嗔 - 创业十忌&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嗔：嗔怒、嗔诟、嗔责。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多创始人通常会有两副面孔，一副用来面对投资</summary>
      
    
    
    
    <category term="创业" scheme="https://captnotes.com/categories/%E5%88%9B%E4%B8%9A/"/>
    
    <category term="startup" scheme="https://captnotes.com/categories/startup/"/>
    
    <category term="创业十忌" scheme="https://captnotes.com/categories/startup/%E5%88%9B%E4%B8%9A%E5%8D%81%E5%BF%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>纪念左耳朵耗子（陈皓）</title>
    <link href="https://captnotes.com/rip-haoel/"/>
    <id>https://captnotes.com/rip-haoel/</id>
    <published>2023-05-15T05:53:47.000Z</published>
    <updated>2023-08-01T16:07:26.067Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_rip_hao_chen.jpg"></p><p>刚刚看到一条消息，非常突然！</p><p><img src="/../images/illustration_rip_haoel_01.jpg"></p><p>就在几天前的 5 月 10 号，耗哥和我还在微信上聊了四十多分钟视频，没想到 13 号晚上人就没了。刚看到这个消息，以为是在恶搞，但是冷静下来一番查证，基本属实了。</p><p>5 月 8 号，我读了他最新发表的<a href="https://coolshell.cn/articles/22422.html">《是微服务架构不香还是云不香》</a>，通过邮件联系了他，毕竟 Serverless 也是我现在特别关注的领域。他回复约我视频沟通，这才有了 10 号的机缘。</p><p>我看到技术圈中一些他生前的朋友纷纷惋惜，也有懊悔拖延了与他见面的。我很庆幸当时读了文章有想法就立即实施，而没有拖着“过阵子再说”，要不然也没有“以后”了。</p><p><img src="/../images/illustration_rip_haoel_02.jpg"></p><p>这条推文就是耗哥和我聊到过往工作经历后的有感而发，也算是对晚辈的一份劝诫吧。我也认为卖惨式的“奋斗”并不能打动市场，顶多显得失败并不是因为“懒惰”。然而，即便是注重作息的耗哥，竟然也以这样突然的方式离开了。</p><p>这远不是第一起程序员猝死，也不会是最后一起。各行各业，有梦想的人，注定痛并快乐着！</p><p>希望包括我在内的所有朋友，多注意身体健康，无效的竞争有害无益，行业内卷犹如杀人的刀。活着，才能见证奇迹！</p><p>最后，希望耗哥回首往事，欣慰没有辜负自己的梦想！安息！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_rip_hao_chen.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚刚看到一条消息，非常突然！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/illustration_rip_haoel_01.jpg&quot;&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="杂文" scheme="https://captnotes.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>嫑以为天下为我独难</title>
    <link href="https://captnotes.com/never-contempt-the-effort-of-others/"/>
    <id>https://captnotes.com/never-contempt-the-effort-of-others/</id>
    <published>2023-05-11T09:21:26.000Z</published>
    <updated>2023-08-01T15:40:54.083Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_never_contempt_the_effort_of_others.jpg"></p><blockquote><p>不要习惯性地认为别人的事儿都很简单。你看着简单，可能你未必了解细节；你看着简单，可能你并没有经历“一万小时的训练”……这不仅仅是尊不尊重别人的问题，这更是了不了解自己的问题。</p></blockquote><p>我曾在朋友圈发过上面这段文字，引起了一些朋友的共鸣。今天我想再引申一下，把这个问题考虑得更透彻些。</p><p>任何人或组织想在充分竞争的市场中生存，都必须持续地提供有竞争力的产品或服务，轻松躺赚几无可能。但无论过程多么艰辛，结果往往看上去要简单许多，正是如此，很多人总觉得别人的活儿都不如自己的有技术含量。</p><p>表象的简单其实隐藏了很多复杂的细节，而要结果可靠，每一个细节都必须耗费大量的心血来打磨。能够快速透过表面预估主要的细节问题以及应对方案是高级技术人员应该掌握的基本技能。我有位前同事 A，他的口头禅是：“这个好说，5 分钟的事儿。”结果好几次任务都因为事先轻浮的判断而严重耽误进度。一开始我以为他真是个大拿，后来才发现，嘴比脑子快不算真的聪明，甚至是工程师的大忌。</p><p>错误地评估任务难度，会给协作进度带来极大困扰；低估别人的工作，则会让合作蒙上阴影。另一位前同事 B，比较专注，但有个特点，喜欢对别人的工作冠以“这个简单”、“那样没有意义”之类的评判，弄得大家很郁闷。我相信他是说者无心，但毕竟听者有意。真诚是一次性的，谁愿意和轻蔑自己的人掏心掏肺呢？如果双方是生意上的潜在合作伙伴，当一方听到另一方说自己的东西简单，要么认为是在为砍价做铺垫，要么反感对方假老练不识货。人为地增加不必要的猜忌与沟通成本，最终伤害的是彼此的现实利益。</p><p>有句话叫“逢人减寿、遇货添钱”。我不提倡过分的恭维，这对真正做事毫无裨益。但直率得不顾及对方感受，其实是自负的一种表现。有些人做上老板以后，喜欢先唱一句高调“聪明人不在乎面子”，然后可想而知，说的全是 PUA 那套，宽于律己严于律人，当你真正剖析他那一亩三分地儿，不过金玉其外、败絮其中罢了。</p><p>逞一时嘴瘾还不容易，当初嘲讽别人傻笨黑粗，如今还有脸对比一下彼此现状么？我始终认为，谦逊是自信和修养的一种体现。在这个分工协作的时代，每个人都有自己专长领域和能力边界，凤毛麟角的真正通才不太具备参考价值。职场上没有真正的笨人，我们怎么可以想当然地认为自己手头上的活儿只有自己能驾驭，别人根本干不了呢；反过来又觉得自己工作的难度被低估，别人的工作是个人就会。</p><p>带团队更是如此，鼓励远比打压有用得多，但很多管理者下意识地喜欢转嫁压力或者担心下属功高盖主，将问题归咎于别人啥都不会，把沟通看作是白嫖自己的宝贵经验。然后就是各种上不得台面的手段，逼走看不顺眼的朽木，寄希望于新来的嫩芽。大公司倒无所谓，小公司但凡这么折腾几次，元气必然大伤。建立并维护一个健康积极快乐的团队氛围需要大量的时间和心血，而摧毁士气分分钟就行。看一个管理者离开他现在的平台去闯荡时有多少人义无反顾地追随，就知道他是真正具备领导能力抑或是<a href="https://en.wikipedia.org/wiki/Laurence_J._Peter">劳伦斯·彼得</a>笔下那些德不配位的主儿了。</p><p>大方赞赏别人的付出并鼓励其不断取得新的成就，不会损伤自身利益和形象。优质的协作可以成倍提升工作效率，进而增加成功实现共同目标的可能。一味抬高自己贬损他人，就像一个不合群的齿轮，转得越快越难受。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_never_contempt_the_effort_of_others.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要习惯性地认为别人的事儿都很简单。你看着简单，可能你未必了解细节；你看着简单，可能你并没</summary>
      
    
    
    
    <category term="创业" scheme="https://captnotes.com/categories/%E5%88%9B%E4%B8%9A/"/>
    
    <category term="杂文" scheme="https://captnotes.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>《李嘉诚：成功没有偶然》摘要与心得</title>
    <link href="https://captnotes.com/li-ka-shing-no-coincidence-for-success/"/>
    <id>https://captnotes.com/li-ka-shing-no-coincidence-for-success/</id>
    <published>2023-04-25T09:43:05.000Z</published>
    <updated>2023-08-01T15:41:49.398Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_li_ka_shing.jpg"></p><blockquote><p>注：【】部分为笔者心得，非原文摘抄。</p></blockquote><ul><li>全力以赴是经营企业的基础。</li><li>要让员工与自己一同为企业付出百分之百的努力和热情，就要懂得善待员工，不能觉得他们只是自己花钱雇来的。</li><li>做老板，不但自己要勤奋，还要有脑子，懂得员工的心理，调动企业上下人员，共同为企业开创美好未来。</li><li>有不寻常的事发生时，立即想到赚钱，这是生意人应该具备的素质。</li><li>做生意有三种方式：一是创新、二是改进、三是跟风。</li><li>创造市场影响力是增加销售非常有效的途径。</li><li>商人一定要不断寻找新的或者未经开发的市场。</li><li>生意不是等来的，而是要靠敏锐的目光去发现。</li><li>比知识重要的是思维，比思维重要的是悟性。</li><li>士人第一要有志，第二要有识，第三要有恒。有志则断不甘为下流，有识则知学问无尽，有恒则断无不成之事。</li><li>任何时候都要在稳健中求发展，发展中保稳健。企业的管理很重要，高水平的管理才能带来高效益。</li><li>一个商人到底有没有前途，取决于他的开拓意识和远大眼光。</li><li>精神来自兴趣，对工作有兴趣就不会累。</li><li>生意的大门总是想有心人敞开的。如果在竞争中，你输了，那么你输在时间；反之，你赢了，也赢在时间。</li><li>当事业稍有起色时，不能自满，要勇于寻求新的发展，这才是生意长远之道。</li><li>在合作中主动出击很重要。</li><li>永远走在对手前面，才能一直保持不败的地位。</li><li>不愿改变的人只能等待运气，懂得掌握时机的人便能创造机会。</li><li>成功没有绝对方程式，但失败都有定律，减低一切失败的因素就是成功的基石。</li><li>同类企业之间的竞争就是产品质量的竞争。</li><li>人生就是在一点一点的改错中成长，重视自己犯下的每一个错误，在悔悟中成长；原谅他人的过错，为自己的修养加一个筹码。</li><li>未攻之前，一定要先守，每一个政策实施之前都必须做到这一点。</li><li>在企业扩张的时候，一定不能过分贪心，很多被淘汰的企业都是盲目扩张造成的。</li><li>做生意最怕自满。</li><li>克服贪婪不是固守原地不发展，保持合适的发展速度对于一个企业来说是必要的，也是企业做大的重要路子。合适的发展速度是适度的投资，是对行业情况和企业自身情况熟知的前提下的决策，要规模，更要发展。</li><li>毅力是一种心态而不是一种生活。</li><li>管理人员对会计知识的把持和尊重，对现金流的控制，对公司预算的掌握是最基本的元素。</li><li>好的管理艺术在于将新事、新思维与传统中和更新的能力。</li><li>企业的核心责任是追求效率及盈利，尽量扩大自己的资产价值。</li><li>讲究仪容整齐清洁是自律的表现。</li><li>商业架构的灵活制度要建基于实事求是，能有自我修正挽回的机制（Check and Balance）。</li><li>了解细节，经常能预防危机的发生。</li><li>以身作则的目的，就是通过管理者的示范作用，让其他员工完全遵从公司的规章制度。</li><li>自我管理是一名管理者让属下信服、成大事的基本因素。</li><li>企业家要尽可能少地把精力和时间花费在交流上，要用更多的时间来培养自己学习、研究、判断的能力，这是决定竞争优势的东西。</li><li>一名优秀的经理，最重要的一点就是懂得授权和放权。——山姆·沃尔顿</li><li>下君尽己之能，中君尽人之力，上君尽人之智。——韩非子</li><li>以人为本不是前提，而是结果。员工通过辛勤的劳动获得合理的报酬，和家人能过上幸福的生活，这才是最大的以人为本。</li><li>一个能够从细微处体谅和善待他人的人，一定是一个与人为善的人，必定有很好的人缘关系，这种人缘关系就是他成功的基石。——《关爱人》戴尔·卡耐基</li><li>要建立同心协力的团队，第一条法则就是能聆听得到沉默的声音。</li><li>企业管理的关键在于人性化，只有通过和员工有效的沟通，互相有了深层次的了解和理解，企业组织才能更有效地发挥作用。</li><li>创造一个开放、合作、信任的工作环境，重视与全体员工分享信息，不仅可以留住杰出的员工，还可以吸引更多优秀的人才加入。</li><li>伟大的事业需要一颗真诚的心与人沟通。——松下幸之助</li><li>优秀的团队必定是沟通良好、协调一致的团队。</li><li>【每个人都有义务维护彼此的尊严。】</li><li>一个人会犯（非原则性）错误，就意味着他不是一个循规蹈矩、安于现状的人，而是一个具有开拓创新、积极进取精神的人。</li><li>放手去做好你认为对的事，即使犯了错误，也可以从中得到经验教训，不再犯同样的错误。——盛田昭夫</li><li>如果管理者不给予员工犯错的机会，总是想着一手牵着走，或是沉溺于批评、抱怨当中，不管什么铁也终究成不了钢。</li><li>要成为一位成功的领导者，不单要努力，更要听取别人的意见，要有忍耐力，提出自己的意见前，更要考虑别人的意见，最重要的是创造出新颖的意念。</li><li>成功的管理者不会一味地显露自己的才华，而是善于倾听别人的意见，借别人的智慧来赚钱。</li><li>成功的管理者都应是伯乐，伯乐的责任不仅在于甄选、延揽“比他更聪明的人才”，更在于绝对不能挑选名气大却妄自标榜的企业明星。</li><li>人才是经营公司的一等任务。在用人方面，怎样对待人才，是管理者领导能力和驾驭能力的高度体现。——杰克·韦尔奇</li><li>用人上一加一不等于二，搞不好等于零。——皮尔·卡丹</li><li>任人唯亲是中国传统家族式管理的习惯做法，这无疑是表示对外来员工不信任，必然会打击他们工作的积极性。</li><li>能否做到知人善任、任人唯贤，是检验企业管理者胸怀和智慧的重要标准。</li><li>要有同理心、能易地而处、张开心胸去体会来自世界各地不同种族间人们的所思所想，才可以超越种族、性别、年龄、文化及其它隔膜。</li><li>成就事业最关键的是要有人帮助你、乐意跟你工作。</li><li>作为企业领导，维护团队建设首先要做的就是怀有一颗包容开放的心，能够接纳不同的员工，尤其是能力超群的。</li><li>有钱大家赚、利润大家分享，这样才有人愿意合作。</li><li>商业合作三大前提：一是双方必须有可以合作的利益；二是必须有可以合作的意愿；三是双方必须有共享共荣的打算。</li><li>合作是解救人类的唯一途径。——罗素</li><li>能否抓住时机，和企业发展的步伐有重大关联。</li><li>抓住时机的重要因素是知己知彼。</li><li>知识的最大作用是可以磨砺眼光、增强判断力。</li><li>商业的成功，取决于做人的成功。做生意的人都精明能干，可是并不是每个人都能成功，关键在于，你得靠自己踏实的做人之道赢得别人的信任，让别人愿意和你达成交易。</li><li>不要局限于一项业务，目光所及之处都可能存在着商机，应该做好准备，抓住每一个商机。在市场不景气的时候，经营多种业务，还可以分摊风险、共渡难关。</li><li>投资能力的关键就是找准市场投资的最佳切入点。</li><li>谁不思考未来，谁就没有未来。</li><li>最失败的投资方式就是跟风。</li><li>如果你不过分显示自己，就不会招惹对手的敌意，别人也就无法捕捉到你的虚实。</li><li>一个人如果能够在创业之初保持一颗谦虚的心，就能够让人们快速地接纳他，帮助他赢得更多的机会。当他获得一些成就之后，还能保持一颗谦虚的心，那么他的事业就会蒸蒸日上。</li><li>过分卖弄自我的人，只会让自己显得更加可怜。</li><li>不要以为明天一定就和今天一样，唯一的保障来自自己。</li><li>能够正确对待金钱的人，才能做到事业有成。</li><li>必须给合作伙伴留足够的利润空间。</li><li>合伙人之间是一种相互补充、相互扶持的关系，只有充分发挥每一方的优势，才能为彼此都带来利益。</li><li>要取得别人的信任，就必须做到重承诺。在做出每一个承诺之前，必须经过详细的审查和考虑。一经承诺，便要负责到底。</li><li>人以自利为出发点对社会的贡献，要比意图改善社会的人的贡献大。——《国富论》亚当·斯密</li><li>能够在这个世上对其他需要你帮助的人有所贡献，便是内心真正的财富。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_li_ka_shing.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：【】部分为笔者心得，非原文摘抄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;全力以赴是经营企业的基础。&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="阅读" scheme="https://captnotes.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>一旦醒来，再难睡着</title>
    <link href="https://captnotes.com/barely-fall-asleep-after-woke-up/"/>
    <id>https://captnotes.com/barely-fall-asleep-after-woke-up/</id>
    <published>2023-01-24T10:03:10.000Z</published>
    <updated>2023-08-01T15:42:26.523Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_barely_fall_asleep_after_woke_up.jpg"></p><p>前阵子我经历过相同套路的几轮电信欺诈，由于不同团伙之间没有建立客户数据共享，所以造成了有的团伙已经碰了一鼻子灰，别的团伙又从头来过的尴尬局面。</p><p>第一通电话是一个自称蚂蚁金服客服打来的：为配合国家禁止大学生参与网络借贷的新规，需要我删除账号中的教育信息。虽然我已毕业多年，还是半信半疑地进入一个钉钉视频群。一进群便知有诈，群里另外俩人，一个只有声音没有画面（以下简称‘声优’），另一个干脆连声音都没有。于是我关了摄像头，看看他们怎么玩儿。</p><p>声优首先以核实手机设置为由，要我在电话拨号键盘上输入<code>**21*[电话号码]#</code>，然后查看微信的微粒贷。让我设置呼叫转移还则罢了，你个“蚂蚁金服”的人操心我微信干嘛？“对，然后我该怎么办？”我故意表现得有些着急又对他深信不疑。他说，由于我之前设置了教育信息，因此授信额度受到影响，现在要跟随他的操作指导，才能提高我的额度。其实套路就是把微粒贷里的钱全贷出来，转他卡上，然后他跑路，我乖乖还贷款。</p><p>一开始我并不清楚他们的套路，只是破绽频现而心生怀疑。我跟他说需要先挂银行卡才能把钱转出来，他还略显不耐烦，一副“吃屎的嫌别人拉得慢”的样子。这时我根据几个关键字搜出了半年前的一篇报道，明白了具体套路，不得不说，<a href="https://xue.baidu.com/okam/pages/strategy-tp/index?strategyId=140540811088072">无条件呼叫转移</a>这一步还是动了脑筋的。</p><p>起先我是想看看他们具体怎么个玩儿法，清楚之后便失去了兴致：“不想跟你逗闷子了，自己找个地方玩儿去吧。”</p><p>后来又有几拨骗子来撩我。第二拨我直接挑明，对方也就识趣地离开了。第三、四拨，我每次都以“正好有事，下下个周末再说”来搪塞。骗子还是很守时的，每次都按照约定准时来电，被我推了好几次之后才醒过味儿来，于是我也摊牌了：知道你们什么套路，这事儿没意思了。</p><p>响鼓不用重锤，本文略去了不少斗智斗勇的细节，比如看到“蚂蚁金服注销部”工牌照片差点儿笑出声来、核实对方真实邮箱等等。事情过去一阵子了，但我时常在想：骗子之所以能得手，完全是因为对方不清楚他们的套路，只要信息透明，就很难再有人上当。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_barely_fall_asleep_after_woke_up.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;前阵子我经历过相同套路的几轮电信欺诈，由于不同团伙之间没有建立客户数据共享，所以造成了有的团伙已经碰了一鼻子灰，别的团伙又</summary>
      
    
    
    
    <category term="杂文" scheme="https://captnotes.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>马老四不配光明正大地死</title>
    <link href="https://captnotes.com/return-to-dust/"/>
    <id>https://captnotes.com/return-to-dust/</id>
    <published>2022-11-25T16:47:30.000Z</published>
    <updated>2023-08-01T15:54:46.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_return_to_dust.jpg"></p><p>马老四的出场是在干农活时被三嫂催着出来见相亲对象曹贵英。平日里，谁会在意驴棚铲屎官马老四有没有按时出现在饭桌上。</p><p>马有铁，行四，村里人习惯叫他马老四，以至于都忘了他的大名。兄弟四人，三个哥哥分别占了金、银、铜，到他这里，已然是最不值钱的“有铁”。他就像个影子，默默地生活在三哥家后院的小土坯房里，被他那又精又蠢的三哥马干吃尽。村里人调侃他被三哥压榨了这么多年，结婚都不舍得给他摆几桌酒，更甭说买个电视，他不吱声，只是处处护着曹贵英。</p><p>马老四自闭、善良，愚而不昧、钝而不蠢，他知道谁好谁不好、也知道别人心里在算计什么，但他不计较，一辈子温良恭俭让。他是个典型的宿命论者，相信万物皆有命数——面对命数，“能说个啥”。</p><p>曹贵英同样是个苦命人，一度认为驴都比她命好。跟马老四过了半个寒暑，日子刚有点儿起色，就一头淹死在村口的水沟里，连张像样的遗像都没有，还得用结婚照来裁。这半年短暂光阴，便是她用一生的气数换来的。</p><p>下葬前，马老四用麦粒在她手上按了朵花儿，“跑到哪里都丢不掉了”，有个记号，下辈子也好找。马老四仿佛又该回到以前那个不被人在意的日子里，但他回不去了，他知道那就像以往在三哥家吃馍不吃菜一样乏味。要让人始终安于现状，就不能让他见一丁点儿世面。</p><p>料理完后事，马老四补上了牧民的土豆、放生了驴子、清了供销社的赊账、还了借的鸡蛋……这辈子，宁教天下人欠我，莫教我欠任何人。</p><p>马老四喝了农药，还吃了个鸡蛋，农药加个蛋，神仙干瞪眼。马老四吃着鸡蛋，望着墙上的曹贵英，颤抖的手拿起她编的草驴端详着，平静得就像等着回家的大巴发车而已。</p><p>马老四死后，他侄子“继承”了他的猪和鸡，至于那间马老四和泥垒墙、曹贵英做梦也没想过属于自己的土坯房，在别人眼里，不过是一万五的拆迁款罢了。而马老四的下落，与其说些晦气的真话，不如就用“进城过好日子去了”搪塞过去，这样大家面子上都好过。</p><p>有人说，马老四没死，被抢救过来了，片尾字幕最后一行小字为证：“2011 年冬，老四马有铁在政府和热心村民的帮助下，乔迁新居，过上了新生活。”这个嘛，心诚则灵，开心就好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_return_to_dust.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;马老四的出场是在干农活时被三嫂催着出来见相亲对象曹贵英。平日里，谁会在意驴棚铲屎官马老四有没有按时出现在饭桌上。&lt;/p&gt;
&lt;p&gt;马有铁，行四，村里人习惯叫他马</summary>
      
    
    
    
    <category term="影视" scheme="https://captnotes.com/categories/%E5%BD%B1%E8%A7%86/"/>
    
    
  </entry>
  
  <entry>
    <title>读《左手程序右手诗》</title>
    <link href="https://captnotes.com/read-program-on-the-left-hand-and-poetry-on-the-right/"/>
    <id>https://captnotes.com/read-program-on-the-left-hand-and-poetry-on-the-right/</id>
    <published>2022-10-13T08:50:38.000Z</published>
    <updated>2023-08-01T15:54:19.709Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_program_on_the_left_hand_and_poetry_on_the_right.jpg"></p><p>难得近日拾得闲暇来赏读<a href="http://boolan.com/jjhou">侯捷</a>老师文集<a href="https://boolan.com/lecture/1000001218">《左手程序右手诗》</a>。虽然从来无缘 C++、MFC、STL 或 COM 相关开发，但无妨我对侯捷老师在技术著&amp;译作领域成就的尊崇。一言以蔽之，侯捷老师的作品，也就随笔杂文我能看懂。</p><p>我一向更容易对会写作的程序员心生好感。有趣的技术固然令人沉醉，但抛开技术不谈人生又终觉乏味。编码之余还有闲心碎念几句，宛如拉小提琴的爱因斯坦，一扫生冷木讷，更显平易亲和。所以遇到一些同行写的随笔，我常常会饶有兴致地拜读一番。而在技术圈层里，能够长期笔耕不辍进而沉淀丰厚优秀文字者，恕我直言，凤毛麟角。</p><p>IT 是个日新月异的行业，新的技术、新的框架、新的风口、新的概念……层出不穷。波涛中乌泱泱尽是弄潮儿，但能否哪怕一次得以翻腾浪尖，不仅要靠平时的定力与刻苦，更要凭借大量幸运的因素。可想而知，如此氛围中还能数十载孜孜耕耘，潜心记录观察、思考以及心得，实属难能可贵！</p><p>从时效来讲，这本文集基本都是些二十年前的旧文，现实早已时过境迁，但深刻的洞见经得起时间的考验。虽说新的技术时刻都在涌现，但仔细观瞧，不过是相同擂台上各家不尽相同的把式而已。问题还是那些问题，变换的往往只是解决问题的手段罢了，所以感觉越来越明显：很多编程语言看上去愈渐相似、许多框架背后的理念越发相通。</p><p>如今已是全民短视频的时代，文字似乎日渐式微。就好比，我全靠短视频来学着做饭炒菜，哪有耐心去翻阅食谱外加领悟。但我也相信，视频有视频的优势，文字有文字的力量。</p><p>所以，我也想借用侯捷老师引用<a href="https://baike.baidu.com/item/%E8%83%A1%E9%80%82/119246">胡适</a>先生的那句话来作个总结：发表是最好的记忆。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_program_on_the_left_hand_and_poetry_on_the_right.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;难得近日拾得闲暇来赏读&lt;a href=&quot;http://boolan.com/jjhou&quot;&gt;</summary>
      
    
    
    
    <category term="阅读" scheme="https://captnotes.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>《剪辑的语法》摘要与心得</title>
    <link href="https://captnotes.com/grammar-of-the-edit/"/>
    <id>https://captnotes.com/grammar-of-the-edit/</id>
    <published>2022-05-05T13:24:18.000Z</published>
    <updated>2023-08-01T16:43:49.176Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_grammar_of_the_edit.jpg"></p><blockquote><p>注：【】部分为笔者心得，非原文摘抄。</p></blockquote><ul><li>电影的剪辑是对电影拍摄中所捕获的影像和声音“镜头”进行整理、回看、筛选和顺片的过程。剪辑的结果就是一个连贯自然而充满意义的故事或是一种视觉呈现，并会尽量忠于影片的原意——娱乐、传达、启发等。</li><li>剪辑师剪切电影的时间以及不同镜头的衔接方式对观众所产生的影响往往会超越故事。</li><li>剪辑的四种基本方法：<ol><li>切：一个镜头与下一个镜头之间的瞬时转换；</li><li>叠化：从一个镜头的结束画面逐渐转换到下一个镜头的开始画面；</li><li>划变：以特定角度行进的一条线或图形穿过屏幕，消除刚结束的镜头图像并显现出下一镜头的图像；</li><li>淡出淡入：上一组画面逐渐变成全黑屏幕（褪至全黑或淡出），下一组画面从全黑屏幕逐渐转为可见影像（黑色消退或淡入）。</li></ol></li><li>叠化的场合：<ul><li>时间变化；</li><li>地点变化；</li><li>时间需要延缓或者加速；</li><li>故事中出现情绪感染；</li><li>切出和切入画面之间存在强烈的视觉关联。</li></ul></li><li>叠化配合慢动作（slow motion）画面时，可延缓时间的流逝。</li><li>划变的场合：<ul><li>时间变化；</li><li>地点变化；</li><li>切出和切入的画面之间没有过多的视觉联系；</li><li>项目在转场处需要更多画面处理。</li></ul></li><li>淡入&#x2F;淡出用于以下情形：<ul><li>节目开头&#x2F;结尾；</li><li>章、场景、片段或幕的开头&#x2F;结尾；</li><li>时间变化之处；</li><li>地点变化之处。</li></ul></li><li>后期制作工作流程最基本的环节：<ul><li>获取；</li><li>整理；</li><li>回看和筛选；</li><li>顺片（assemble edit）；</li><li>粗剪（rough cut）；</li><li>精剪（fine cut）；</li><li>图像锁定；</li><li>生成母版和交付。</li></ul></li><li>对原素材的整理决定后期制作流程是顺利流畅还是缓慢困难。</li><li>基本镜头类型：<ul><li>超特写（extreme close-up）；</li><li>大特写（big close-up）；</li><li>特写（close-up）；</li><li>中特写（medium close-up）；</li><li>中景（medium shot）；</li><li>中远景（medium long shot）；</li><li>远景（long shot&#x2F;wide shot）；</li><li>大远景（very long shot）；</li><li>超大远景（extreme long shot）；</li><li>双人镜头（two shot）；</li><li>过肩镜头（over the shoulder）。</li></ul></li><li>镜头拍摄的四个基本要素：<ol><li>变焦镜头；</li><li>摄影机移动；</li><li>座架&#x2F;支架；</li><li>拍摄对象。</li></ol></li><li>镜头的基本类别：<ul><li>简单镜头：镜头、摄影机、座架未移动，简单的拍摄对象移动；</li><li>复杂镜头：镜头、摄影机、无座架移动，简单的被摄对象移动；</li><li>运动镜头：镜头、摄影机、座架运动，更复杂的被摄对象运动。</li></ul></li><li>焦点不准是最影响镜头效果的。</li><li>演员或被拍摄对象从一个镜头的画面走出，进入另一个镜头的画面，在此过程中银幕方向必须保持一致。</li><li>180° 规则由拍摄一个场景动作的第一个摄影机确定，此镜头通常是一个展示演员和环境的远景。</li><li>匹配角度（matching angles）即在拍摄每个人物时每个镜头类型中该人物的角度、在画面中的大小、面部的焦点要一直。</li><li>视线是一条假想线，连接人物的双眼与电影世界中吸引人物注意力的任何物体。</li><li>人类十分擅长判断动作的流畅性。</li><li>剪辑的最终目的是将成片呈现给观众。剪辑师的任务是千方百计以制片人预想的方式来感染观众。</li><li>剪辑决策依据：<ul><li>信息；</li><li>动机；</li><li>镜头构图；</li><li>摄影机角度；</li><li>连贯；</li><li>声音。</li></ul></li><li>使转场保持平稳顺畅、天衣无缝的连贯，是避免观众注意到剪辑的重要法宝。</li><li>最理想的剪辑是为故事情节服务并时刻吸引观众注意力。</li><li>剪辑的五种类型：<ol><li>连续动作剪辑（action edit）；</li><li>画面位置剪辑（screen position edit）；</li><li>匀称剪辑（form edit）；</li><li>概念剪辑（concept edit）；</li><li>综合剪辑（combined edit）。</li></ol></li><li>基本剪辑练习包括：<ul><li>声音和视觉是搭档而不是对手；</li><li>新的镜头应包含新的信息；</li><li>每一次剪辑都要有理由；</li><li>观察动作线（action line）；</li><li>挑选合适的剪辑形式；</li><li>越好的剪辑越不容易被注意；</li><li>剪辑是一种创作。</li></ul></li><li>剪辑师应切记避免屏幕上影像与声音不匹配，原因就是声音比视觉能更快地制造真实性。眼睛趋向于把看到的事物真实化，而声音则更直接地激发想象力。</li><li>一部电影的成功是基于观众对连贯的视觉信息的期待。</li><li>确定镜头的长度，让眼睛有足够的时间来解读和吸收视觉信息。</li><li>剪辑实践原则：<ul><li>避免从不正确的天头留白（head room）镜头切换到一个正确的天头留白镜头，反之亦然；</li><li>避免镜头中虚假物体离人物头部过近；</li><li>避免画面边缘切掉人脸或身体；</li><li>剪接匹配镜头而不采用不匹配镜头；</li><li>剪辑电影对话时，不要裁掉表演中的停顿，除非特殊要求；</li><li>反应镜头出现在话语中间比话语结束更自然；</li><li>寻找剪辑点时无需受对话约束；</li><li>在三人对话中，不要从双人镜头切换到另一个双人镜头；</li><li>在剪辑单个人物的特写镜头时，脸部越大越好；</li><li>对于单个人物而言，尽量避免切换到拍摄角度相同的镜头；</li><li>剪接“起身”时，要尽量使被摄对象的眼睛长时间保留在画面内；</li><li>动作特写剪接时应选择动作较慢的特写镜头；</li><li>推拉镜头优于变焦镜头；</li><li>谨慎处理无目的的拉远镜头；</li><li>剪辑横摇镜头或平移镜头时，应使用画面流畅、计时精确且引发被摄对象移动的镜头；</li><li>应从静止画面开始或结束横摇、纵横或推拉镜头；</li><li>如果横摇、平移或推拉镜头内被摄物或被摄对象正在移动而接下来又变为静止，那么不要切换到同一物体或人物的静止画面；</li><li>在同一个方向移动的人或物，都有一条动作轴线。剪辑时不得越过这条动作轴线否则运动方向会发生逆转；</li><li>剪接运动镜头时，避免在同一组人的两个双人镜头间切换；</li><li>剪辑电话会话场景时，应多角度拍摄人物头部；</li><li>连续动作剪辑中，如果人物从画面左侧走出，同一人物进入下个镜头时应在右侧；</li><li>注意镜头中“兴趣物”在银幕上的位置；</li><li>一系列特写镜头后，应尽快呈现一个远景镜头；</li><li>对新出场的人物或被摄对象应用特写镜头；</li><li>在剪辑新场景新背景时，应第一时间采用定场镜头；</li><li>连续动作剪辑时，避免从一个人物的远景切换到特写；</li><li>注意切换到远景后再切到黑屏；</li><li>节目开始时，声音轨道先于视觉轨道；</li><li>节目结尾时，使用结尾音乐；</li><li>将剪辑好的影片先搁置一段时间后再重新审视；</li><li>一个场景中采用人物特写镜头达到最佳效果；</li><li>只要人物的“视线”停在兴趣物上，就应立即切出；</li><li>在纪录片剪辑中应去掉受访者言语中的口头禅“嗯”、“啊”之类；</li><li>在声轨层面，确保音乐不要压制话语；</li><li>录制好画面外或过肩镜头演员干净清晰的对话声，将其置于对话音轨之下；</li><li>注意片内字幕和下沿字幕图像持续时间应合理；</li><li>如必要，可在声道音量大的地方剪切；</li><li>充分利用片段中的自然划变作为转场点；</li><li>利用镜头中的快速横摇作为转场点；</li><li>避免在剪辑点剪切改变银幕方向的横摇和纵摇镜头；</li><li>如可能，将剪辑后的影片拿给其他人看并征求他们的反馈；</li><li>剪辑连贯动作镜头时，通过第二个镜头的起始画面推进动作进展；</li><li>延长粗剪时间，不要试图在剪辑初期就尽善尽美；</li><li>带有明喻关系的镜头之间使用叠化；</li><li>使用插入镜头可以弥补连贯动作或压缩&#x2F;延长时间中的间隙；</li><li>当被摄对象离开画面时，应避免出现空镜头。</li></ul></li><li>平行剪辑（parallel editing）也叫做交叉剪切（cross cutting）要求剪辑师使用特殊的结构将两条故事线交织剪切。也就是说，在显示其中一条故事线的一部分后，在接下来的镜头里转到另一条故事线，这在影片中表示两个剧情正在同时发生。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_grammar_of_the_edit.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：【】部分为笔者心得，非原文摘抄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;电影的剪辑是对电影拍摄中所捕获</summary>
      
    
    
    
    <category term="阅读" scheme="https://captnotes.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>《故事的道德前提》摘要与心得</title>
    <link href="https://captnotes.com/the-moral-premise/"/>
    <id>https://captnotes.com/the-moral-premise/</id>
    <published>2022-05-05T01:20:17.000Z</published>
    <updated>2023-08-01T16:43:47.891Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_the_moral_premise.jpg"></p><blockquote><p>注：【】部分为笔者心得，非原文摘抄。</p></blockquote><ul><li>所有成功的影片，都会围绕着一个“并不完美”的人物展开，他（她）想要改善自己的生活，对某个客观现实目的产生诉求，但却在自己前进的路上遭遇了一系列的现实障碍，并且这些障碍变得越来越难以跨越。主角面对着的每一个客观现实障碍，都源于一个单一的、主观精神的，或者说是情绪上的障碍。为了克服所有的现实障碍，主角首先必须跨越这个唯一的精神主观障碍。这个攻克精神障碍的过程，才是主角的整个经历、整部电影想要表达的真实意图。而这个唯一的精神障碍，便是道德前提所要揭示的内容——对主角面临的精神主观困境的真理描述。</li><li>在一部经过精心构建的电影中，每一个场景都提供了某种精神主观层面的证据，以此来证明影片本身的精神推论。</li><li>如果没有道德前提，人物的外部行为便没有牢靠的动机。</li><li>如果编剧在作品中使用的道德前提是错误的、虚假的，或是建构不完善的，那么他最终会发现他的作品中充斥着毫无意义的对话和动作行为，任何人都无法理解他所要表达的前提。</li><li>外部的客观冲突来源于内在的精神价值观冲突。</li><li>冲突是故事必不可少的基本要素，而它必须生根于价值观，围绕着道德前提进行构建。</li><li>只有当兴趣和利益是完全合乎美德的时候，我们才能够真正避免自己犯错。—— 本杰明·富兰克林</li><li>电影类型:</li></ul><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>动作（Action）</td><td>冒险（Adventure）</td><td>艺术（Art）</td><td>拍档（Buddy）</td><td>恶搞（Capers）</td></tr><tr><td>喜剧（Comedy）</td><td>成长（Coming-of-age）</td><td>法庭（Courtroom）</td><td>犯罪（Crime）</td><td>侦探（Detective）</td></tr><tr><td>灾难（Disaster）</td><td>史诗（Epic）</td><td>幻想（Fantasy）</td><td>黑色（Film Noir）</td><td>强盗（Gangster）</td></tr><tr><td>鬼怪（Ghost）</td><td>历史（Historical）</td><td>恐怖（Horror）</td><td>爱情（Love）</td><td>音乐（Musicals）</td></tr><tr><td>神话（Myth）</td><td>公路（Road）</td><td>情节剧（Romance）</td><td>科幻（Sci-fi）</td><td>社会（Social）</td></tr><tr><td>惊悚（Thrillers）</td><td>西部（Western）</td><td></td><td></td><td></td></tr></tbody></table><ul><li><p>叙事中的价值观冲突大致氛围：</p><ol><li>人与人；</li><li>人与自然；</li><li>人与自己；</li><li>人与超自然（Supernatural）；</li><li>人与社会；</li><li>人与机器。</li></ol></li><li><p>乔治·波尔蒂的 36 中戏剧情境：</p></li></ul><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>祷告</td><td>救赎</td><td>报复性犯罪</td><td>血亲间的报复</td><td>追求</td><td>灾难</td></tr><tr><td>成为残忍或厄运的受害者</td><td>反抗</td><td>勇敢而艰巨的事业</td><td>诱拐</td><td>谜题</td><td>获取</td></tr><tr><td>对父辈的敌意</td><td>与父辈的抗争</td><td>肆意的淫乱</td><td>疯狂</td><td>致命的轻率</td><td>爱情导致的犯罪</td></tr><tr><td>因父辈不认可引发的杀戮</td><td>为理想牺牲</td><td>为亲人牺牲</td><td>激情的代价</td><td>必须牺牲所爱的人或物</td><td>高等与低等的抗争</td></tr><tr><td>通奸</td><td>爱的犯罪</td><td>发现爱人的不忠</td><td>爱情的阻拦</td><td>爱上敌人</td><td>雄心壮志</td></tr><tr><td>与神灵的冲突</td><td>错误的嫉恨</td><td>错误的裁决</td><td>懊悔</td><td>失而复得</td><td>痛失所爱</td></tr></tbody></table><ul><li>是否拥有一个强大的道德核心，决定了电影能否获得成功。</li><li>“道德”并非仅仅表明正确的东西，而更多的是在论述错与对之间的区别。</li><li>树立榜样要比强调戒律更有效地作用于心灵。</li><li>故事讲述者的目的，就是带领着观众经历一段情绪的、精神的历程，并在其中揭示出有关人类经历的尖锐真理。这种历程对于观众来说应该是畅通无阻的，并且能够引发出深刻的共鸣。</li><li>戏剧必须是关于“一个单一的，而非多重的问题”。—— Michael Tierno</li><li>编剧最重要的就是彻底地理解自己的人物，他们的每一个瞬间行为都是由他们性格中的多重面与复杂性决定的。</li><li>最为成功的电影都是关于普遍真理（Universal Truths）的，它们作用于所有的人群、所有的地域，贯穿所有的历史时段。</li><li>“道德前提”的结构形式：（道德缺陷）引起（失败），而（美德）带来（成功）。</li><li>在大多数的成功电影里，主角首先都是朝着错误的方向扬帆起航，直到他学会并领悟了真理，继而再以正确的方式步入结局。</li><li>道德前提给予了人物客观和主观上的行为动机，并不断告诫主角美德与缺陷分别可能会带来的奖赏与惩罚。</li><li>当一个电影人将观众和电影缝合在一起，他就算是成功了。缝合意味着最极致的联系，当观众与电影中的人物产生认同，他们便会从生理到心理上被强烈的带入故事，与人物共同进退。</li><li>现实缝合，指的是借助摄影机机位或剪辑手段等机械方式，将观众带入故事剧情。</li><li>如果在电影中，自始至终都描绘着相同的道德前提，并且它与观众所熟知的自然法则、万物秩序是统一的，那么观众便会从精神主观的层面被缝合入电影里，认同电影的叙事，并且相信电影所传达的原则是真实正确的。</li><li>当我们决定要写一部剧本时，我们需要知道故事的真实意图以及如何结局，这将有效地推动故事情节结构的形成、塑造人物的现实与道德旅程，最终将它们导向符合逻辑且令人满意的结局。</li><li>缺陷给英雄，美德给坏人，这样才能赐予你的人物深度。</li><li>类型电影都包含着最基本的文化冲突，它无法获得终极解答，只能提供一种暂时的、理想化的解决方案。</li><li>尽管在客观现实中，人物间各自的目的都不尽相同，但它们从本质上来说都必须来源于对同一个道德前提的隐喻。</li><li>人物的戏剧轨迹，要求这个人物从某种程度的好或坏的行为方式，转变成为另一种程度的行为方式，而一个人物的外部行为都必须是由他内心的价值观与选择来决定的。</li><li>电影有效性共识（Film Validity Equation）： $V&#x3D;\left({\displaystyle\sum_{x&#x3D;1}^{x&#x3D;n} \frac{Vs_x+Vp+Vsp_x}{3}}\right)&#x2F;n$ $V$：电影的有效性； $Vs_x$：每一个独立场景体现的有效力； $Vp$：前提的有效力； $Vsp_x$：每一个场景对前提的支撑力度； $n$：一部特定的电影中场景的数量。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_the_moral_premise.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：【】部分为笔者心得，非原文摘抄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;所有成功的影片，都会围绕着一个“并</summary>
      
    
    
    
    <category term="阅读" scheme="https://captnotes.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>《架构整洁之道》摘要与心得</title>
    <link href="https://captnotes.com/clean-architecture/"/>
    <id>https://captnotes.com/clean-architecture/</id>
    <published>2022-04-04T14:20:05.000Z</published>
    <updated>2023-08-01T15:49:29.375Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_clean_architecture.jpg"></p><blockquote><p>注：【】部分为笔者心得，非原文摘抄。</p></blockquote><ul><li>软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求。</li><li>软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。</li><li>要想跑得快，先要跑得稳。</li><li>软件系统必须保持灵活。</li><li>需求变更的范畴与形状，是决定对应软件变更实施成本高低的关键。</li><li>平衡系统架构的重要性与功能的紧急程度，是软件研发人员的职责。</li><li>结构化编程对程序控制权的直接转移进行了限制和规范；面向对象编程对程序控制权的间接转移进行了限制和规范；函数式编程对程序中的赋值进行了限制和规范。</li><li>科学方法论不需要证明某条结论是正确的，只需要想办法证明它是错误的。</li><li>测试只能展现 Bug 的存在，并不能证明不存在 Bug。—— Edsger W. Dijkstra</li><li>测试的作用是让我们得出某段程序已经足够实现当前目标这一结论。</li><li>对于架构师来说，面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力，这种能力让架构师可以构建出某种插件式架构，让高层策略性组件与低层实现性组件分离，低层组件可以编译成插件，实现独立于高层组件的开发和部署。</li><li>所有的竞争问题、死锁问题、并发更新问题都是由可变变量导致的。</li><li>架构设计良好的应用软件应该将状态修改的部分和不需要修改状态的部分隔离成单独的组件，然后用合适的机制来保护可变量。</li><li>架构师应该着力于将大部分处理逻辑都归于不可变组件中，可变状态组件的逻辑应该越少越好。</li><li>程序无一例外是由顺序结构、分支结构、循环结构和间接转移这几种行为组合而成的，无可增加，也缺一不可。</li><li>一般情况下，我们为软件构建中层结构的主要目标有：<ul><li>使软件可容忍被改动；</li><li>使软件更容易被理解；</li><li>构建可在多个软件系统中复用的组件。</li></ul></li><li>SOLID 原则<ul><li>SRP（Single-responsibility Principle，单一职责原则）：任何一个软件模块都应该只对某一类行为者负责；</li><li>OCP（Open-closed Principle，开闭原则）：系统设计必须允许新增代码修改系统行为，而非只能靠修改原有代码；</li><li>LSP（Liskov Subsitution Principle，里氏替换原则）：组件必须遵守同一约定，一边这些组件可以相互替换；</li><li>ISP（Interface Segregation Principle，接口隔离原则）：在设计中避免不必要的依赖；</li><li>DIP（Dependency Inversion Principle，依赖反转原则）：高层策略性的代码不应该依赖实现底层细节的代码，而实现底层细节的代码应该依赖高层策略性代码。</li></ul></li><li>在一般情况下，任何层次的软件设计如果依赖于不需要的东西，都会是有害的。</li><li>应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类。</li><li>不要在具体实现类上创建衍生类。</li><li>不要覆盖（override）包含具体实现的函数。</li><li>应避免在代码中写入与任何具体实现相关的名字，或者是其它容易变动的事物的名字。</li><li>源代码的依赖方向永远是控制流方向的反转，这是 DIP 被称为依赖反转原则的原因。。</li><li>组件是软件的部署单元，是整个软件系统在部署过程中可以独立完成部署的最小实体。</li><li>与构建组件相关的三个基本原则：<ol><li>REP（Release Reuse Equivalence Principle，复用&#x2F;发布等同原则）：软件复用的最小粒度应等同于其发布的最小粒度；</li><li>CCP（Common Closure Principle，共同闭包原则）：将那些会同时修改，并且为相同目的而修改的类放到同一个组件中，而将不会同时修改，并且不会为了相同目的而修改的那些类放到不同的组件中；</li><li>CRP（Composite Reuse Principle，共同复用原则）：将经常共同复用的类和模块放在同一个组建中。</li></ol></li><li>对大部分应用程序来说，可维护性的重要性要远远高于可复用性。</li><li>组件依赖关系图中不应该出现环。</li><li>组件结构图中的一个重要目标是指导如何隔离频繁的变更。</li><li>依赖关系必须要指向更稳定的方向。</li><li>组件的抽象化程度应该与其稳定性保持一致。</li><li>绝对不要听从那些说应该让架构师从代码中解放出来以专心解决高阶问题的伪建议。</li><li>软件架构设计最高优先级目标就是保持系统正常工作。</li><li>基本上，所有的软件系统都可以降解为策略与细节这两种主要元素。策略体现的是软件中所有的业务规则与操作过程，因此它是系统真正的价值所在。细节则是指那些让操作该系统的人、其它系统以及程序员们与策略进行交互，但是又不会影响到策略本身的行为。</li><li>优秀的策略应该允许系统尽可能地推迟与实现细节相关的决策，越晚最决策越好。</li><li>设计良好的软件架构必须支持以下几点：<ul><li>系统的用例与正常运行；</li><li>系统的维护；</li><li>系统的开发；</li><li>系统的部署。</li></ul></li><li>康威定律：任何一个组织在设计系统时，往往都会复制出一个与该组织内沟通结构相同的系统。</li><li>设计良好的软件架构可以让系统在构建完成后立刻就能部署。</li><li>设计良好的架构应该通过保留可选项的方式，让系统在任何情况下都能方便地做出必要的变更。</li><li>软件架构设计本身就是一门划分边界的艺术。</li><li>通过将策略隔离，并让源代码中的依赖方向都统一调整为指向高层策略，可以大幅降低系统变更所带来的影响。</li><li>用例本质上就是关于如何操作一个自动化系统的描述，它定义了用户需要提供的输入数据、用户应该得到的输出信息以及产生输出所应该采取的处理步骤。</li><li>用例控制着业务实体之间的交互方式。</li><li>用例并不描述系统与用户之间的接口，它只描述该应用在某些特定情景下的业务逻辑，这些业务逻辑所规范的是用户与业务实体之间的交互方式，它与数据流入&#x2F;流出系统的方式无关。</li><li>业务逻辑应该保持纯净，不要掺杂用户界面或者所使用的数据库相关的东西。在理想情况下，这部分代表业务逻辑的代码应该是整个系统的核心，其它低层概念的实现应该以插件形式接入系统中。业务逻辑应该是系统中最独立、复用性最高的代码。</li><li>良好的架构设计应该只关注用例，并能将它们与其它的周边因素隔离开。</li><li>不应该将未来的需求抽象化。</li><li>任何形式的共享数据行为都会导致强耦合。</li><li>虽然软件质量本身并不会随时间推移而损耗，但是未妥善管理的硬件依赖和固件依赖却是软件的头号杀手。</li><li>如果一个系统的代码只能在目标硬件上测试，那么它的开发过程会变得非常艰难。</li><li>可以使用框架，但要时刻警惕，别被它拖住。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_clean_architecture.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：【】部分为笔者心得，非原文摘抄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;软件架构的终极目标是，用最小的人</summary>
      
    
    
    
    <category term="阅读" scheme="https://captnotes.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter的强制自我审查</title>
    <link href="https://captnotes.com/flutter-pre-commit/"/>
    <id>https://captnotes.com/flutter-pre-commit/</id>
    <published>2022-03-11T10:10:53.000Z</published>
    <updated>2023-08-01T15:48:20.595Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_flutter_pre_commit.jpg"></p><p>在<a href="/effective-code-review">《如何做好 Code Review》</a>中我论述过代码审查对于保证代码品质的重要性，最近开始采用<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git Hooks</a>的方式为<a href="https://flutter.dev/">Flutter</a>项目增加提交前的强制自我审查。这样做的好处在于将机械化检查交给电脑，把思考的部分留给大脑。</p><p>我认为代码提交前需要做的最基本检查包括格式和代码规范。前者交给<a href="https://prettier.io/">Prettier</a>，后者由<a href="https://docs.flutter.dev/testing/debugging#the-dart-analyzer">Analyze</a>负责。</p><h3 id="Lefthook"><a href="#Lefthook" class="headerlink" title="Lefthook"></a>Lefthook</h3><p>我采用<a href="https://github.com/evilmartians/lefthook">Lefthook</a>实现 Git 钩子，如果你有更好的选择，欢迎推荐分享。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac</span></span><br><span class="line">brew install lefthook &amp;&amp; lefthook install</span><br></pre></td></tr></table></figure><p>安装 Lefthook 后，在项目根目录下运行<code>lefthook install</code>命令来生成<code>lefthook.yml</code>文件，并在其中的<code>pre-commit &gt; commands</code>节点下添加两项配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prettier:</span></span><br><span class="line">  <span class="attr">glob:</span> <span class="string">&quot;*.dart&quot;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">dart</span> <span class="string">format</span> &#123;<span class="string">staged_files</span>&#125; <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">add</span> &#123;<span class="string">staged_files</span>&#125;</span><br><span class="line"><span class="attr">linter:</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">dart</span> <span class="string">analyze</span></span><br></pre></td></tr></table></figure><h3 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h3><p><code>flutter analyze</code>通过<a href="https://pub.dev/packages/flutter_lints">flutter_lints</a>插件对<a href="https://dart.dev/">Dart</a>代码进行静态语言检查，检查规则配置在<code>analysis_options.yaml</code>文件中。但是打开该文件可以看到，Flutter 并没有为我们配置任何默认规则。我把我正在采用的规则配置放在文末，欢迎酌情采纳。</p><p>接下来我们可以测试一下配置能否正常工作。比如，将<code>main()</code>替换为：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">const</span> title=    <span class="string">&#x27;Flutter&#x27;</span>;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .&amp;&amp;git commit -m <span class="string">&#x27;Commit for analysis.&#x27;</span></span><br></pre></td></tr></table></figure><p>接下来你会发现，Prettier 将代码格式化为：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;Flutter&#x27;</span>;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是静态检查没有通过，因为<code>title</code>变量没有被使用、函数<code>aa</code>没有返回类型等：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXECUTE &gt; linter</span><br><span class="line"> Analyzing demo_lint_flutter...</span><br><span class="line"></span><br><span class="line">   info • The value of the <span class="built_in">local</span> variable <span class="string">&#x27;title&#x27;</span> isn<span class="string">&#x27;t used • lib/main.dart:4:9 • unused_local_variable</span></span><br><span class="line"><span class="string">   info • The function &#x27;</span>aa<span class="string">&#x27; should have a return type but doesn&#x27;</span>t • lib/main.dart:8:1 • always_declare_return_types</span><br><span class="line">   info • Type annotate public APIs • lib/main.dart:8:1 • type_annotate_public_apis</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>强烈建议你在接下来的每一个 Flutter 项目里都坚持这样做，不要提交 Smelling Code。</p><h3 id="analysis-options-yaml"><a href="#analysis-options-yaml" class="headerlink" title="analysis_options.yaml"></a>analysis_options.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span> <span class="string">package:flutter_lints/flutter.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">analyzer:</span></span><br><span class="line">  <span class="attr">strong-mode:</span></span><br><span class="line">    <span class="attr">implicit-casts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">errors:</span></span><br><span class="line">    <span class="attr">missing_required_param:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">missing_return:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">todo:</span> <span class="string">ignore</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_flutter_pre_commit.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;/effective-code-review&quot;&gt;《如何做好 Code Review》&lt;/a&gt;中我论述过代码审查对于保证代码品质的重</summary>
      
    
    
    
    <category term="编程" scheme="https://captnotes.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>嬉 - 创业十忌</title>
    <link href="https://captnotes.com/playfulness-ttos/"/>
    <id>https://captnotes.com/playfulness-ttos/</id>
    <published>2022-02-25T03:29:40.000Z</published>
    <updated>2023-08-01T15:44:16.867Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_playfulness.jpg"></p><blockquote><p>嬉：业精于勤，荒于嬉；行成于思，毁于随。——《进学解》唐·韩愈</p></blockquote><p>不必贬低一个失败的人，只要他真的努力过，毕竟现实世界不是努力就一定有好结果。</p><p>但有一种人则属于表演型奋斗者，比如办公室摆着很多书，却时常要么翘着二郎腿玩游戏、要么邀一群人来吹牛聊天。</p><p>曾经风光无两的<a href="https://baike.baidu.com/item/%E7%BD%91%E9%99%85%E5%BF%AB%E8%BD%A6">网际快车</a>之所以日暮途穷，就是因为创始人沉迷于游戏不能自拔。游戏不是洪水猛兽，但是过度沉浸于某件事而耽误了主业，这个后果还得自己来承担。</p><p>我不推崇苦行僧式的的奋斗。奋斗的历程一定是艰苦的，但不是越苦越容易出成绩。虽然艰苦和成功往往如影随形，但其实并没有一个可以量化的标准比例。所以不必迷信艰苦，更不要歌颂苦难，不如把精力和脑力用在如何提高效率、锁定正确目标上。</p><p>我也不是排斥娱乐，谁不喜欢玩儿呢，毕竟是人类的天性。但放松调节和玩物丧志完全是两回事。长期处于紧张状态容易让人变得悲观和疲倦，适当的娱乐能够重拾乐观与自信。而且大脑的放松还有助于找到之前苦寻不得的答案。其实我就遇到过几次，在经历一段长时间的工作后，卡在某个问题上总是找不到好的办法，实在烦了就去干点儿别的，却很快就像是顿悟了一样，脑子里冒出了解决方案。</p><p>所谓“老虎赶路，不追小兔”，而有些“老虎”却专干追猫撵狗的事儿，还假装自己很勤奋很用功，一副天道必然酬勤的架势，本质上不过是在吃老本罢了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_playfulness.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嬉：业精于勤，荒于嬉；行成于思，毁于随。——《进学解》唐·韩愈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不必贬低一个失败的人，只要他真的</summary>
      
    
    
    
    <category term="创业" scheme="https://captnotes.com/categories/%E5%88%9B%E4%B8%9A/"/>
    
    <category term="startup" scheme="https://captnotes.com/categories/startup/"/>
    
    <category term="创业十忌" scheme="https://captnotes.com/categories/startup/%E5%88%9B%E4%B8%9A%E5%8D%81%E5%BF%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>永远的乙方</title>
    <link href="https://captnotes.com/forever-party-b/"/>
    <id>https://captnotes.com/forever-party-b/</id>
    <published>2022-02-21T00:53:15.000Z</published>
    <updated>2023-08-01T15:43:54.141Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_forever_party_b.jpg"></p><p>混迹职场，可以有很多种心态：以公司为家、与团队为敌、道不同不相为谋……今天我想简单聊下我从去年实践至今的心态——始终将自己放在乙方的位置。</p><p>大概会有很多朋友对此不屑：“乙方？呵呵，你愿当你当去，我可不想再看甲方爸爸的脸色！”没错，作为甲方确实有许多好处，比如项目比较自主、不用整天面对金主的颐指气使、不必为了回款而低头哈腰，等等。</p><p>但是，有谁真的能逃脱乙方的命运吗？这也正是我要说的，把自己调整为乙方的心态，可能更有利于职场的发展。</p><p>想象自己运营着一家只有你自己的小公司，这家公司的生死存亡完全得靠你。然后，把领导、同事看作是一个个发给你订单和需求的甲方。甚至，面对下属也不要一副“奴隶主”的嘴脸，记住：你并不拥有任何人。与其说他们服从于你，不如说他们服从于你的职务。</p><p>我不是教任何人如何卑躬屈膝，相反，我分享的是一种视角和心态，一种把自己放在广义创业者角度来面对工作和事业的态度。创业不是特指注册一家公司、印一沓名片、在办公室里摆个茶盘弄个貔貅啥的，创业是一种为自己负责、主动思考下一步、为提高效率而摒弃狭隘心理的工作状态。</p><p>当你把上、平、下级同事通通当成自己的合作方，或许你眼中的同事，就不再像过去那样分为可爱、无聊或者讨厌了。你与其他任何人合作的最终目的就是为了让你这一个人的小公司能够活下去。这样的心态也有助于保持同事之间适当的距离感，从而减少产生职场负面情绪的几率。</p><p>别忘了，把你的工资当成是项目款。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_forever_party_b.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;混迹职场，可以有很多种心态：以公司为家、与团队为敌、道不同不相为谋……今天我想简单聊下我从去年实践至今的心态——始终将自己放在乙方的位置。&lt;/p&gt;
&lt;p&gt;大</summary>
      
    
    
    
    <category term="创业" scheme="https://captnotes.com/categories/%E5%88%9B%E4%B8%9A/"/>
    
    <category term="管理" scheme="https://captnotes.com/categories/%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>玩转二叉树</title>
    <link href="https://captnotes.com/binary-tree-basis/"/>
    <id>https://captnotes.com/binary-tree-basis/</id>
    <published>2021-12-11T06:55:11.000Z</published>
    <updated>2023-08-01T16:19:46.195Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_binary_tree_basis.jpg"></p><p>树是计算机编程当中很基础的一种数据结构，二叉树则是树中最基本的一种。虽然很多程序员在日常工作中未必会直接用到二叉树，但是对于这样一种基础的数据结构，熟练掌握其基本概念和操作，有助于关键场合不露怯。毕竟，所有的玩儿法都是由最基本最核心的理念衍生而成。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>二叉树，顾名思义，从根结点开始，每个结点可以分出最多两个子结点，没有子结点的结点叫叶子。</p><h3 id="形态"><a href="#形态" class="headerlink" title="形态"></a>形态</h3><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>“满”即是“饱满”：一个从根到叶子，每一个非叶子结点都分出两个子结点，看上去是那么的饱满。其总结点个数计算公式为：$2^k-1$，$k$为深度；第$n$层结点个数计算公式为：$2^{n-1}$。</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>不饱满也不要紧，只要缺的都是右叶子而不缺左叶子。其深度计算公式为：$\lfloor log_2k\rfloor+1$。</p><h4 id="二叉搜索树-红黑树"><a href="#二叉搜索树-红黑树" class="headerlink" title="二叉搜索树&#x2F;红黑树"></a>二叉搜索树&#x2F;红黑树</h4><p>左子结点值小于父结点值，父结点值小于右子结点值，且左子树中所有结点值均小于根结点值，根结点值小于右子树中任一结点值。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> TreeNode leftChildNode;</span><br><span class="line">    <span class="keyword">private</span> TreeNode rightChildNode;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h4><p>深度遍历二叉树分为前序、中序和后序遍历，一般采用递归的实现形式比较简洁。无论哪种遍历，左结点一定是在右结点之前遍历，而所谓的前、中、后，则是中间结点在什么时机处理的区别。因此： - 前序遍历 &#x3D; <strong>中</strong> → 左 → 右 - 中序遍历 &#x3D; 左 → <strong>中</strong> → 右 - 后序遍历 &#x3D; 左 → 右 → <strong>中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traverseDepthFirst</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="宽度优先"><a href="#宽度优先" class="headerlink" title="宽度优先"></a>宽度优先</h4><p>层序遍历二叉树一般可以用<code>LinkedList</code>或类似的数据类结合迭代来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traverseBreadthFirst</span><span class="params">(TreeNode rootNode)</span> &#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rootNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linkedList.offer(rootNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!linkedList.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> linkedList.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> linkedList.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(node.value);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>聊完遍历来看看构建吧。可以通过两个数组来构建一个二叉树，这两个数组分别对应的是二叉树的前序及中序遍历，或者中序与后序遍历。下面这段代码就是通过递归的方式，用前序和中序遍历数组构建出一个二叉树。而利用中序和后序遍历构建与这种方式雷同，区别在于：前序数组的第一个元素代表父结点，后续数组中对应的是最后一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder == <span class="literal">null</span>  preorder.length == <span class="number">0</span>  inorder == <span class="literal">null</span>  inorder.length == <span class="number">0</span></span><br><span class="line">             preorder.length != inorder.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> preorder[<span class="number">0</span>];</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">delimiterIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> number : inorder) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == rootValue) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delimiterIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] leftInorder = Arrays.copyOfRange(inorder, <span class="number">0</span>, delimiterIndex);</span><br><span class="line">    <span class="type">int</span>[] rightInorder = Arrays.copyOfRange(inorder, delimiterIndex + <span class="number">1</span>, inorder.length);</span><br><span class="line">    <span class="type">int</span>[] leftPreorder = Arrays.copyOfRange(preorder, <span class="number">1</span>, delimiterIndex + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span>[] rightPreorder = Arrays.copyOfRange(preorder, delimiterIndex + <span class="number">1</span>, preorder.length);</span><br><span class="line"></span><br><span class="line">    root.leftChildNode = buildTree(leftPreorder, leftInorder);</span><br><span class="line">    root.rightChildNode = buildTree(rightPreorder, rightInorder);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二叉树最核心的概念和操作基本就是这些，至于其它诸如合并、翻转、搜索、验证、最大……之类的问题，无非就是在遍历或构建的不同阶段实现不同的逻辑需求。所以，与其试图记住所有二叉树问题的答案，倒不如回过头来，找到二叉树概念的根，彻彻底底地吃透，从而任何问题都可以自己推导出解来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_binary_tree_basis.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;树是计算机编程当中很基础的一种数据结构，二叉树则是树中最基本的一种。虽然很多程序员在日常工作中未必会直接用到二叉树，但是对于这样一种基础的数据结构，熟练</summary>
      
    
    
    
    <category term="编程" scheme="https://captnotes.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>N皇后问题</title>
    <link href="https://captnotes.com/n-queens-problem/"/>
    <id>https://captnotes.com/n-queens-problem/</id>
    <published>2021-12-06T13:26:25.000Z</published>
    <updated>2023-08-01T16:18:45.755Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_n_queens_problem.jpg"></p><p><a href="https://baike.baidu.com/item/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/11053477">N 皇后问题</a>是比较典型的<a href="https://baike.baidu.com/item/%E5%9B%9E%E6%BA%AF%E6%B3%95">回溯法</a>问题，不过在回溯法中，解决 N 皇后问题算是有一些难度的了。</p><p>网上有很多该问题的解法，我这个虽然不是抄来的，性能也不算彪悍，但相比之下，我对“<a href="/">机长出品</a>”的可读性还是很有信心的。所以捞点儿干货贴在这里，以备将来查阅之需。</p><p>回溯法的本质是对<a href="https://baike.baidu.com/item/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86">树形结构的遍历</a>，一层一层递进，保留符合条件的节点。到达终点后，随着<a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695">递归</a>的一层层退出，抹掉上一次遍历时留下的痕迹，从而开始下一轮遍历。</p><p>回溯法一般都会结合递归来实现，递归可以简化多层嵌套<code>for</code>循环的场景。但写递归函数时一定要把子问题逻辑捋清楚，并确保退出条件生效。也就是说，每经过一次递归操作，退出条件中的变量一定要有所变化，否则就是递得进去，归不出来了。递归虽然能够简化多层嵌套循环，但并没有改变其本质，因此并不是说递归一定比<code>for</code>循环效率高，避免无效遍历是提升循环效率的一个主要套路。</p><p>在 N 皇后问题中，树的每个节点都代表一个 N×N 大小的棋盘，棋盘上记录了该节点所有直系父级节点里皇后所在的位置，而每个皇后所在的位置必须保证以该位置为中心点画出的“米”字每一笔延伸到棋盘边缘都不会经过另一个皇后。其实，琢磨透了这点儿区别，N 皇后问题和一般的用回溯法在一维数组里找组合的问题也就没多大差别了。</p><p>除了保证逻辑上正确，剩下主要就是优化。比如：皇后的位置是从上到下一行一行确定的，所以在判断对角线上是否存在其他皇后时，不需要检查“米”字下面那一撇一捺，因为此时下面的数据还没有生成，不会有皇后。</p><p>另外，别忘了每层递归完成时移除上次记录的数据。在这个问题中，还要记着抹掉上一行皇后占位的状态，否则下一轮递归到这一层时，残留的状态会让代码输出的结果“莫名其妙”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NQueensProlbem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[][] squareStates;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solve</span><span class="params">(<span class="type">int</span> sideLength)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        squareStates = <span class="keyword">new</span> <span class="title class_">boolean</span>[sideLength][sideLength];</span><br><span class="line">        backtrack(resultList, sideLength, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; resultList, <span class="type">int</span> sideLength, List&lt;String&gt; rowList, <span class="type">int</span> rowIndex,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rowIndex == sideLength) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rowList.size() == sideLength) &#123;</span><br><span class="line">                resultList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(rowList));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> columnIndex; index &lt; sideLength + columnIndex; index++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (index + <span class="number">1</span>) % sideLength;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isSquareAvailable(rowIndex, offset)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">rowBuilder</span> <span class="operator">=</span> newRow(sideLength);</span><br><span class="line"></span><br><span class="line">            rowBuilder.setCharAt(offset, <span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">            squareStates[rowIndex][offset] = <span class="literal">true</span>;</span><br><span class="line">            rowList.add(rowBuilder.toString());</span><br><span class="line">            backtrack(resultList, sideLength, rowList, rowIndex + <span class="number">1</span>, offset);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!rowList.isEmpty()) &#123;</span><br><span class="line">                rowList.remove(rowList.size() - <span class="number">1</span>);</span><br><span class="line">                Arrays.fill(squareStates[rowIndex], <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isSquareAvailable</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span>  rowIndex &gt;= squareStates.length  columnIndex &lt; <span class="number">0</span>  columnIndex &gt;= squareStates.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sideLength</span> <span class="operator">=</span> squareStates.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Description: Both entire row and column must be available.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; sideLength; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (squareStates[index][columnIndex]  squareStates[rowIndex][index]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Description: From the current row to the top one, check if every top left and</span></span><br><span class="line">        <span class="comment">// top right one is available.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; rowIndex; index++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> rowIndex - index;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftSquareIndex</span> <span class="operator">=</span> columnIndex - offset;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightSquareIndex</span> <span class="operator">=</span> columnIndex + offset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((leftSquareIndex &gt;= <span class="number">0</span> &amp;&amp; squareStates[index][leftSquareIndex])</span><br><span class="line">                     (rightSquareIndex &lt; sideLength &amp;&amp; squareStates[index][rightSquareIndex])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">newRow</span><span class="params">(<span class="type">int</span> sideLength)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sideLength);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">squareIndex</span> <span class="operator">=</span> <span class="number">0</span>; squareIndex &lt; sideLength; squareIndex++) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_n_queens_problem.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9</summary>
      
    
    
    
    <category term="编程" scheme="https://captnotes.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>如何减小微信小程序代码包大小</title>
    <link href="https://captnotes.com/how-to-reduce-package-size-of-weapp/"/>
    <id>https://captnotes.com/how-to-reduce-package-size-of-weapp/</id>
    <published>2021-10-20T16:03:40.000Z</published>
    <updated>2023-08-01T16:18:22.402Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_how_to_reduce_package_size_of_weapp.jpg"></p><p>这两天被小程序代码包大小暴涨的问题困扰了挺久。简单说说怎么回事吧，就是之前好端端的微信小程序，最近配合新需求作了些改动，代码包大小突然翻了两倍多，从不到 2MB 一下子超过 5MB，超过了腾讯对小程序代码包大小不得超过 2MB 的限制，从而没法上传，也就没法真机调试，更不能发布了。</p><p>首先想到的是把所有图片资源都上传到文件服务器，腾出本地空间。但图片并不多，还用<a href="https://tinypng.com/">TinyPNG</a>压缩过，心算都知道不可能超过 3MB。果然，即便移除了所有图片，代码包依然还有 4MB 多。</p><p>Google 一番，不少人都遇到过这个问题。网上给出的解决办法几乎清一色都是拆分代码包，虽然单个代码包不能超过 2MB，但通过拆分，总共不超过 20MB 就行。不是没想过拆，是感觉没这个必要，之前统计过，代码文件加一起也就 1.2MB，所以就没考虑过分包。既然众口一词都是教人如何分包，万一真是包治百病的济世良方呢，试试看，反正不要钱。</p><p>具体的分包策略和方式请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html">官方文档</a>，这里懒得赘述。</p><p>半信半疑地分完包，主包还是超过 4MB。要不就是改成云函数，但毕竟不是只写了个<code>Hello World</code>，改动太大，暂不考虑。但是网上找不到别的招儿了，没办法，自己琢磨、另辟蹊径呗。</p><p>文本文件不可能那么大，图片又都被我挪走了，那么嫌疑最大就是第三方 SDK。我只引用了两个 SDK，这次并没增加，只是将其中一个的版本升了级。首先查了一下该 SDK 的 Bug 列表，没有相关问题反馈。那会不会是升级之后，老版本没有及时清理，从而也被算进去了呢？因此我用<code>npm uninstall</code>命令卸载了该 SDK，并重新构建了 NPM，然而效果如同蚍蜉撼树。</p><p>直觉告诉我，方向肯定没问题。问题具体出在哪儿呢？我开始打起微信开发者工具的算盘。</p><p><img src="/../images/illustration_how_to_reduce_package_size_of_weapp_image_01.png" alt="代码包大小统计"></p><p>有什么办法可以看到代码包里具体的文件大小吗？长话短说，此处省去 N 千字。“详情”→“基本信息”里的“代码依赖分析”猛地蹦到我的视线里，让我立马想起 Android Studio 里的<code>Remove Unused Resources</code>——对呀，找找看有没有无效的引用。</p><p><img src="/../images/illustration_how_to_reduce_package_size_of_weapp_image_02.jpg" alt="部分清理后的代码依赖分析结果"></p><p>分析结果不仅按照方块面积来可视化文件大小，还可以列出哪些文件是没有被依赖的。这就好比泄露的内存，都没人用了，还在那儿占着地方。根据分析结果，从大到小将无依赖的代码文件该删的删、该砍的砍，在不影响小程序正常运行的前提下将主代码包大小降到 2MB 以下不是什么难事。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_how_to_reduce_package_size_of_weapp.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这两天被小程序代码包大小暴涨的问题困扰了挺久。简单说说怎么回事吧，就是之前好端端的微信小程序，最近配合新需求作了些改</summary>
      
    
    
    
    <category term="编程" scheme="https://captnotes.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS微信卡死的正确解救姿势</title>
    <link href="https://captnotes.com/fix-wechat-crash-on-ios/"/>
    <id>https://captnotes.com/fix-wechat-crash-on-ios/</id>
    <published>2021-10-07T06:11:53.000Z</published>
    <updated>2023-08-01T16:16:49.846Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_fix_wechat_crash_on_ios.jpg"></p><blockquote><p>症状：打开微信直接卡死，滚动、点击……任何操作都无法响应。如果保持屏幕常亮，也不会有任何改变；如果等到屏幕自动熄灭再点亮并进入系统，这时微信已经被后台挂起，点击微信图标，应用界面打开后很快就会闪退，闪退前也无法响应任何操作。</p></blockquote><p>微信卡死就像牙疼一样，没遇到呢不觉得是个事儿，遇到了就得着急上火。尤其是有些聊天记录经常需要用到，又不能轻易卸载重装。</p><p>其实卡死的情况之前也遇到过，但卡了会儿又莫名其妙好了，就没太在意。这回不同，十来次重启应用和系统都无法解决，电脑端微信登录请求也无法被手机端接收，也就无法及时处理微信消息和备份聊天记录。由于前几天刚清理过微信缓存，系统剩余空间也还很充裕，因此问题就变得削微有些棘手。</p><p>从网络搜索来看，咨询类似问题的用户也不少，但是回复的解决办法一个比一个扯淡。扯淡主要是因为眼瞎又急于表现，比如人家都说了，卡得死死的，任何操作都做不了，还告诉人家点哪哪哪进入设置去清理缓存；或者已经说明了具体的 iPhone 型号（X 及以上），还用老掉牙的“Home+关机键”的办法来教别人如何强制重启…… GFYS!</p><p>既然网上的办法靠不住，那还是自求多福吧。一顿骚操作之后，我无意中发现了<strong>解决办法： 1. 在手机桌面长按微信应用图标，弹出菜单； 2. 点击“收付款”、“扫一扫”或“我的二维码”其中任何一个来打开微信； 3. 微信启动后大概率会自行崩溃，不要紧，重复步骤 1 和 2； 4. 大概 4、5 次以后，不断地崩溃会触发微信自身的异常检测程序； 5. 点击下一步，直到询问是否清理缓存，选择清理缓存。</strong></p><p>然后问题就解决了，接下来先赶紧全量备份微信聊天记录，以免哪天连上诉办法都解决不了卡死的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_fix_wechat_crash_on_ios.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;症状：打开微信直接卡死，滚动、点击……任何操作都无法响应。如果保持屏幕常亮，也不会有任何改变；如果等到屏幕自动熄灭</summary>
      
    
    
    
    <category term="杂文" scheme="https://captnotes.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>从引用质能方程想到的</title>
    <link href="https://captnotes.com/a-thought-from-a-quotation-of-the-mass-energy-equation/"/>
    <id>https://captnotes.com/a-thought-from-a-quotation-of-the-mass-energy-equation/</id>
    <published>2021-08-10T23:49:23.000Z</published>
    <updated>2023-08-01T16:16:20.899Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_a_thought_from_a_quotation_of_the_mass_energy_equation.jpg"></p><blockquote><p>At regular intervals in the learning process, confidence should actually decrease as knowledge increases. That’s because a person’s confidence actually decreases slightly due to the sudden realization of what they don’t know. - Marc Chernoff</p></blockquote><p>小学五年级时，学校组织辩论赛，同组一个<a href="https://baike.baidu.com/item/%E9%A2%A4%E7%BF%8E%E5%AD%90">颤翎子</a>生硬地引用<a href="https://baike.baidu.com/item/%E8%B4%A8%E8%83%BD%E6%96%B9%E7%A8%8B/1884527">质能方程</a>来阐述“即使复杂如原子弹这类高精尖的玩意儿，背后的原理也是相当简单的”这一论点。原子弹是很多孩子自打记事起就耳熟能详的东西，质能方程倒是包括我在内很多同学头回听说的新概念，一时间奉若圭臬，走哪儿都不忘拿出来嘚瑟一番。</p><p>现在想想，当时可真是好骗！为什么是$E&#x3D;mc^2$而不是$E&#x3D;m+c^2$或者$E&#x3D;m\div c^2$呢？万一那哥们儿一紧张，说成$E&#x3D;mc^3$了呢？到了高中开始学习质能方程，才发现原来“背后的原理”其实一点儿也不简单。要真正理解方程的推导过程——而不是仅仅满足于考试时套用对公式——那也是一番苦功夫！</p><p>难怪人们常说“知识越多越不自信”。身处浩渺夜幕，仰望深邃星空，感知个体渺小，畅想无限可能……愈发觉得要为自己的无知与谬误保留可能的几率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_a_thought_from_a_quotation_of_the_mass_energy_equation.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At regular intervals in th</summary>
      
    
    
    
    <category term="杂文" scheme="https://captnotes.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>重新解读“手表定律”</title>
    <link href="https://captnotes.com/reinterpretation-segals-law/"/>
    <id>https://captnotes.com/reinterpretation-segals-law/</id>
    <published>2021-07-30T18:54:32.000Z</published>
    <updated>2023-08-01T16:15:59.027Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/feature_reinterpretation_segals_law.jpg"></p><blockquote><p>Segal’s Law: A man with a watch knows what time it is. A man with two watches is never sure. 手表定律：当人有一块手表时，知道时间；有两块时，反而不知道了。</p></blockquote><p>要让手表定律更加严谨，还得补上很多限定条件，简言之：两块看上去走时正常但时间不一致又没有网络校时功能的手表。</p><p>这条定律的主要应用场景是组织管理，一旦深思熟虑之后确定了策略或目标，就必须果断地执行，而不能犹犹豫豫、左顾右盼。有一个清晰明确的目标，哪怕它并不完美，也好过同时有很多目标。</p><p>不过，我反而想从更日常的角度，看看能否从这个定律得到什么启发。</p><p>先在不影响结果的前提下做一些简化：假定肉眼不能确定明显时间差异的范围为 3 个小时；时间的精度为分钟。从而就有$180$种可能性。</p><p>如果你有$1$块手表，时间准确的可能性就是$\frac {1}{180}$。相应的，错误的概率就是$1-\frac {1}{180}&#x3D;\frac{179}{180}$。假设准确率为$x$，错误率为$y$，即$x&#x3D;1-y$。</p><p>如果有$2$块手表，将$2$同时代入等式两边：$2x&#x3D;2(1-y)$，等式依然成立，但获得正确时间的概率却从$\frac {1}{180}$提高到了$\frac {1}{90}$，直观地说，就是正确率从$0.56\%$提升到了$1.11\%$。继续，假设有$3$块手表，$3x&#x3D;3(1-y)$，得到正确时间的概率进一步从$\frac {1}{90}$变成$\frac {1}{60}$，也就是从$1.11\%$到$1.67\%$的提升…… 以此类推，当你有$180$块不同时间的手表时，一定有一块显示的是正确时间。</p><p>随着正确率的不断提升，错误率也在相应地降低。虽然我们知道这 180 块手表里，一定有一块是准确的，但还不能确定到底是哪一块。这时我们可以将手表按时针指向分成几组，再观察其它外部信息，来判断哪些时间是明显错误的。比如这时候我们看到已经有人从食堂打饭回来了，而食堂每天都是中午 12 点整开放，那么就可以果断放弃还在 11 点的那些表。再假设食堂到了 1 点就关闭堂食，但回来的人说还有很多人才刚刚开始吃，所以我们就可以只保留时间在 12 点以内的 60 块表。诸如此类，我们可以借助观察，不断缩小范围，最终确定最准确的或是可接受误差范围内的所有信息。</p><p>因此，在不需要做重大管理决策的日常生活中，手表定律似乎从相反的一面告诉我们：对于同一件事物，你获取到的信息版本越多，才越有可能接近真相。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/feature_reinterpretation_segals_law.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Segal’s Law: A man with a watch knows what time it is.</summary>
      
    
    
    
    <category term="杂文" scheme="https://captnotes.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>《社会工程：安全体系中的人性漏洞》摘要与心得</title>
    <link href="https://captnotes.com/social-engineering/"/>
    <id>https://captnotes.com/social-engineering/</id>
    <published>2021-07-23T15:23:49.000Z</published>
    <updated>2023-08-01T16:43:48.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/featured_social_engineering.jpg"></p><blockquote><p>注：【】部分为笔者心得，非原文摘抄。</p></blockquote><ul><li>必须置身事外才能全面地理解安全，从本质上来说就是把自己作为一个局外人，尝试用其它方式来进入系统。</li><li>大部分人因为自信满满而对潜在的问题视而不见。</li><li>制造恐慌、运用影响力、采用操纵策略和建立信任感等方法都可以让受害者消除戒备。</li><li>承认系统有漏洞并且可能被攻破，是让系统更加安全的首要条件。</li><li>社会工程的定义：一种操纵他人采取特定行动的行为，该行动不一定符合“目标人”的最佳利益。其结果包括获取信息、取得访问权限或让目标采取特定的行动。</li><li>对网站的攻击、恶意代码和恶意的内部人员是最具破坏性的攻击形式。</li><li>一个未被检查的不满员工可能比一群虎视眈眈的专业黑客所造成的破坏还要大。</li><li>读懂身体语言、面部表情和语调信息也可以增强你的沟通能力。知道怎样保护自己和你爱的人，会提升你的价值，让你对外部世界更加敏感。</li><li>战争的胜利百分之九十取决于情报。—— Napoléon Bonaparte</li><li>即使是最微小的细节也可能促成社会工程人员的成功入侵。</li><li>通过暗示前一位顾客已购买，并在交流中使用“优惠”、“优先”等关键词，销售人员能在短时间内就使目标兴趣盎然。</li><li>收集信息时不要总想着怎么组织和运用这些数据，创建一个文件或信息收集服务来收集信息才是当务之急。</li><li>对于一名社会工程人员来说，数据收集是每次行动的核心。</li><li>对社会工程人员来说，应该熟知当地法律，避免做出违法行为，这非常重要！</li><li>对于社会工程人员，建立交流模型将帮助确定最好的传送和反馈方式，以及最合适的传输内容。</li><li>社会工程基本交流规则：<ul><li>不要理所当然地认为接收者和你的情况完全一样；</li><li>不要理所当然地认为接收者将按照你的方式阐释信息；</li><li>交流不是一件绝对的、一成不变的事情；</li><li>如果有多人参与交流，应始终假设每个人的情况各不相同。</li></ul></li><li>社会工程人员必须是交流的大师，必须能够有效地进入且留在一个人私密的精神空间，并保证不冒犯目标或令目标反感。制定、实现和实践有效的交流模型是成功的关键。</li><li>记住，我们往往只有一次机会打动别人。</li><li>交流模型中最困难的部分是确保收集到的信息是可靠的。</li><li>有效地引导别人讲心里话说出来，是社会工程成功的关键。</li><li>诱导的意思是引出、套出或者得出一个逻辑上的结论。或者，可以将诱导定义为一种引发或者诱发某种特定类型行为的刺激。</li><li>有效地使用诱导意味着你能提出具有诱导性的问题，刺激别人采取你所希望的行动。</li><li>诱导的效果如此之好的原因如下：<ul><li>大部分人希望看上去比较有礼貌，尤其是陌生人；</li><li>专业人士希望自己看起来见多识广、很有才气；</li><li>如果得到赞赏，大部分人通常会越说越起劲并泄露更多的秘密；</li><li>大部分人不会为了撒谎而撒谎；</li><li>大部分人对貌似关心自己的人会比较友善。</li></ul></li><li>人们在说起自己的成就时常常口无遮拦。</li><li>获取的信息越多，攻击的成功率就越高。</li><li>掌握交谈的艺术的三个主要步骤：<ol><li>表现得自然；</li><li>拥有足够的知识；<ul><li>不能装成自己不可能成为的人；</li></ul></li><li>切忌贪婪。</li></ol></li><li>铺垫是一种以隐晦或婉转的方式植入想法或思路的技巧。</li><li>诱导的应用在于其有效性、很难察觉及不具威胁性。</li><li>精心的吹捧会促使他人说出一些从未透露过的信息。</li><li>表达共同兴趣是诱导的一个重要方面。</li><li>告诉他人、显示自己的博闻强识、不能容忍错误表达等欲望是人类的天性。</li><li>作为社会工程人员，在交流中主动提供信息会迫使目标提供具有共同价值的信息。</li><li>在挖掘秘密方面没有比酒精更有效的东西。</li><li>人们会构造记忆来契合自己对世界的已有认知。</li><li>很多情况下，人们的记忆库是基于自己的感知和对自己重要的事情而形成的。</li><li>通过引导性问题来操纵人们的记忆是可行的。</li><li>诱导在应用中的原则：<ul><li>问题太多会吓跑目标；</li><li>问题太少会让对方不自在；</li><li>一次只问一个问题。</li></ul></li><li>将谈话想象成一个漏斗，上面是最大的、最“中性”的部分，底部是最窄的、最直接的部分。</li><li>懂得如何与他人沟通是诱导者必须具备的技巧。社会工程人员必须适应并且能融入任何环境及情况下的交流。迅速建立与目标的初步信任是关键步骤，没有友好的关系，交流极有可能以失败告终。</li><li>一般情况下，伪装得越简单，说明技术越娴熟。</li><li>伪装不是扮演某个角色或者出演部分剧情，不是撒谎后不停地圆谎，而是真正成为要扮演的那个人。</li><li>伪装的定义是创造虚构的场景以劝说目标受害者泄露信息或者做出某种行为。</li><li>创造一个全新的身份，然后用这个身份去获取信息。</li><li>娴熟的信息收集技术是伪装成功的关键。</li><li>伪装的质量与所收集的信息质量有直接关系。</li><li>体现伪装本质的原则：<ul><li>调查越充分，成功的几率越大；</li><li>植入个人爱好会提高成功率；</li><li>练习方言或者表达方式；</li><li>很多时候，如果低估了电话的作用，可能会减少社会工程上的投入程度；</li><li>伪装越简单，成功率越高；</li><li>伪装必须要很自然；</li><li>为目标提供逻辑结论或下一步安排。</li></ul></li><li>利用他人的不幸来牟利，是这个世界的可悲事实。</li><li>自信有助于说服目标相信你就是你宣称的那个人。</li><li>自信心始终与任务和自身处境密切相关。不同情况下，我们的自信心是不一样的。—— Tom G. Stevens</li><li>自信（只要不是自大）可以建立信任和默契，而且让人感觉很放松。尽量让目标谈论你感到舒服的话题，然后你就可以自信地发挥，这点很重要。</li><li>认知失调理论认为：人们倾向于协调自己的信仰、观点乃至几乎所有的认知。如果态度和行为之间存在不协调，就必须要修正这种不协调。</li><li>学会用不同的方言与人沟通会给人留下深刻的印象。</li><li>学会工作领域的专业表达方式可以使情况有所改观。</li><li>使用电话提高伪装的可信度，是得到目标认可最快的方式之一。</li><li>保持故事情节、事实和细节的简单性，会增强可信性。</li><li>不过分追求细枝末节也很重要。一个简单的伪装允许故事发展，并且允许目标运用想象去填满空隙。不要试图将伪装设计得很精致，只要记住那些伪装中比较关键的小细节即可。</li><li>让伪装更加自然的方法：<ul><li>不要考虑自己的感受；</li><li>不要把事情太当真；<ul><li>只有正确看待小的失败，才能取得更大的成功；</li></ul></li><li>学会找到相关信息；</li><li>争取多积累经验。</li></ul></li><li>每次伪装前，都要进行大量的联系，以至于足以使伪装自然得像是幽默与天赋的产物。</li><li>我们看待事物的方式而不是事物本身，决定着一切。—— Carl Gustav Jung</li><li>正确地解读人们说话、手势、眼神和面部表情中的信号，可以使你看起来像一位精通读心术的人。</li><li>让客户认可你的非言语行为、用客户认可的语言表达方式，并且在音量、语调和方言上匹配，这样通常可以免吃闭门羹。</li><li>视觉思维者需要视觉输入才能作出决定。</li><li>面对听觉思维者时，一定要注意自己的措辞。他们听到的词语表达将决定事情的成败。</li><li>要想与动觉思维者沟通，得和他们进行感觉上的联系。</li><li>视觉思维者需要看着对方说话才能正确沟通。</li><li>在社会工程过程中越是能将人们置于舒适的氛围，成功的几率就越高。人总是喜欢和让他感到舒适的同伴在一起。</li><li>从一名社会工程人员的角度来看，恐惧经常被用来诱使目标对象做特定的反应和动作。</li><li>机智的对答或不经意间的玩笑可能会是目标马上放松警惕，降低其心理防线。</li><li>营造悲伤的气氛也是社会工程常用的手段之一，因为它可以激发人们采取某些行动，比如捐款或者提供信息。</li><li>神经语言入侵（NLP，Neuro-Linguistic Programming）：通过一些情绪上的微妙暗示操纵他人达到特定的情绪状态。</li><li>一旦发现矛盾的情况，你所要做的应该是挖掘更多的信息。就矛盾之处进行询问，注意观察对方的微表情变化，也有助于对真实情况作出判断。</li><li>NLP 提倡使用嵌入式命令影响目标以某种方式进行思考或采取某种行动。此外，通过变换语调强调句子中的某些词语，使得人们的潜意识将重点放在那些词语上。</li><li>语调的上升和下降不能太做作，必须用得很微妙。</li><li>构思最有利完成任务的句子，不要指望一句话就能起作用。</li><li>不要指望通过说几句话就能让目标言听计从。</li><li>让你的声音具有动感。</li><li>当想说出的句子中包含一个隐藏的命令时，你要降低语调，通过细微的变化使目标意识不到其中命令的成分。否则你会提醒对方的潜意识，让他觉得什么地方出了问题。如果出现这种情况，他会觉察你的企图，让你难以成功。</li><li>如果一门技巧不是与生俱来的，则练习是必不可少的。</li><li>声音的音调以及将重音放在某些特定的词语上能够改变整个句子的含义。</li><li>选择能够产生最大影响的词语。对于想要目标积极思考的问题选择积极的词语，对于那些不需要目标想太多的事情选择消极的词语。</li><li>采访和审讯之间的主要区别在于，采访中目标在身体和心理上都处于舒适的状态，而审讯的目的则是通过审讯的场所和所提问题让目标感到不适来向其施压，从而使其老实交代。</li><li>诱导、解读人们的表情和手势及洞悉人类的行为都有助于你成为一名了不起的审讯者。</li><li>新手在采访和审讯过程中经常会犯的一个错误就是，总是假设所有的行为改变都有重大的意义。</li><li>不要单单留意一个动作，而要留意一连串动作。</li><li>越融入环境，越不容易被识破。</li><li>如果在某个本不应出现的地方或场合被抓，不要惊慌失措，要让他人觉得你很淡定。你的淡定会让抓住你的人极大地降低警觉，也给予你一个消除疑虑的机会。</li><li>在危险的场合表现出淡定，可以获取到很多信息。</li><li>镜像手势不仅包含模仿目标的肢体语言，还包括模仿他的手势，让对方更容易跟着你的思路走。</li><li>当一个人处于放松状态时，肘部一般会没有拘束地放在身体两侧。当感到威胁或害怕时，身体的自然反应是肘部向胸腔收进。</li><li>值得注意的手势至少包括以下几种：<ul><li>一个张开的手掌可能表明诚意；</li><li>指尖搭在一起，表明这个人认为自己很权威；</li><li>敲击或击打手指可能表示焦虑；</li><li>摸脸可能是思考的迹象，触摸头发可能显示不安，触摸耳朵可能表明犹豫不决。</li></ul></li><li>不要刻意去记手势，而是要记住其附加的信息。</li><li>要综合使用面部表情、手势和姿势。它们必须融合在一起，达到一种平衡，以支持你的伪装。</li><li>有助于完善聆听技能的步骤：<ul><li>集中注意力；<ul><li>高度关注目标对象；</li><li>尽量不要提前思考，不要急着去策划下一部反应；</li><li>尽量不要被环境因素影响；</li><li>密切关注说话者的弦外之音；</li></ul></li><li>提供你在聆听的证据；<ul><li>不时地点点头，不用太频繁，但是要足以让对方知道你在听；</li><li>不要忘记十分重要的微笑；</li></ul></li><li>提供有价值的反馈；<ul><li>确保所问的是相关的问题；</li><li>你的问题必须表现出你在积极地聆听，并且有很强的欲望去获取更深入的理解；</li><li>时不时地重述或者概括你所听到的东西很管用；</li></ul></li><li>不要打断对方； -打断对方的讲话显得你不顾及他的感受，并且会扰乱说话者的思路。</li></ul></li><li>把好的聆听技巧变为本能，从而不需要绞尽脑汁地去想。</li><li>在社会工程需要聆听的场景中，你必须极力压制那些内心的成见，以免影响你取得成果。</li><li>对信息而不是对人作出反应。如果你不赞同一个人的信仰或立场，给他足够的面子，可以使对方感觉跟你相处非常舒服。甚至在不赞同时，你可以聊聊别的来转移注意力。</li><li>反射式响应具有几项基本原则：<ul><li>积极聆听；</li><li>当需要作出回应时，注意自己的情绪；</li><li>用你自己的语言重复目标提供的内容；</li><li>可以用一些含糊的语句来做出反应。</li></ul></li><li>社会工程的目标是收集信息，进入那些不允许你进入的地方或者获取无权得到的信息，或者促使目标对象做出常理下不会做的行为。</li><li>如果没有共识，对话将会陷入僵局。从社会工程背后的心理学原则来讲，共识是支柱之一。</li><li>建立共识的前提是喜欢对方，因为人们可以看穿虚情假意。</li><li>建立对目标的真正兴趣可以使你更容易建立共识。</li><li>接触目标之前，要检查自己的仪表和其它可能影响对方的个人因素。</li><li>尽量确保你的外表没有任何扎眼的、让人不远亲近的东西。</li><li>【身边常备漱口水。】</li><li>“7-38-55 定律”：统计数据表明，人们对你的印象只有 7%取决于谈话的内容，38%在于肢体语言和语调，而 55%在于外表。</li><li>如果满脑子都是最终目的，那么你一定会给对方留下负面印象。</li><li>让别人去聊他自己可以使你更受欢迎。</li><li>认真倾听他人说话，尝试确定并理解其潜在的情感，然后站在他的角度去思考，可以让人觉得你是真的感同身受。</li><li>表达同情时不要显得盛气凌人。</li><li>如果你的情感处于封闭状态，表达同情将变得非常困难；如果你乐于与他人交往的话，表达同情就变得非常容易。</li><li>人们在对某些事情抱有思维定势时往往会变得有些自以为是。自以为是或者武断的态度可以改变一个人对所述事情的反应。即使什么都不说，你也会在心里想，这会体现在你的肢体语言或面部表情上。</li><li>培养自己对别人思考及做事方式的好奇心，而不要固步自封。好奇心可以防止你作出草率的决定。在寻求帮助或请求得到更多的信息时，这会让人觉得你很谦逊。</li><li>保持心胸开阔，探究并接受别人在某一话题上的想法，即使这些想法与你的想法有所不同。</li><li>人类的基本心理需求：<ul><li>归属&#x2F;联系&#x2F;爱</li><li>权力&#x2F;地位&#x2F;能力</li><li>自由&#x2F;责任</li><li>娱乐&#x2F;学习</li></ul></li><li>共识可以在人与人之间创建超越得失的关系。</li><li>满足对方的需求可以大大增加建立共识的机会。不要让对方觉得你别有用心，而是真心诚意地去帮助他。</li><li>可以使对方即刻放松下来的 NLP 技术：<ol><li>呼吸频率保持一致；</li><li>语音、语调保持一致；<ul><li>对于口音，原则是不要模仿，除非你能运用得得心应手，否则不要尝试，不伦不类的口音会毁掉共识；</li></ul></li><li>肢体语言保持一致。</li></ol></li><li>预期定律：人们常常遵循他们感受到的别人的期望或要求来做决定。</li><li>一些行之有效的嵌入式指令基本原则：<ul><li>指令要短，3-4 个词即可；</li><li>些许强调会更加有效；</li><li>蕴含在普通的语句中最有效；</li><li>配以适当的面部表情和肢体语言。</li></ul></li><li>演讲者以故事和引用的方式来传达信息会更为有效。</li><li>人类思维缓冲区溢出 &#x3D; 预期定律 + 思维铺垫 + 嵌入式指令</li><li>理解人们的思维方式、思维定势形成的原因以及怎样改变他们的想法，这是成为一名社会工程人员的必修课。</li><li>晓之以理，不如示之以利。—— Benjamin Franklin</li><li>说服目标对象的 5 项基本原则：<ol><li>目标明确；</li><li>构建共识；</li><li>洞悉环境；</li><li>灵活应变；</li><li>内省。</li></ol></li><li>社会工程的全部目的就是影响目标采取一项不一定符合他们最佳利益的行动。</li><li>要构建共识，首先需要从目标的心理状态入手，即尝试了解他们的心情。</li><li>不能在言语上攻击目标对象和他的习惯，而是必须理解和接受对方的心情，这样才能与之建立共识，最终产生影响。</li><li>只有能够真正站在对方的角度考虑问题时，才能构建坚实的共识，否则你意图影响他人的努力将归于失败。</li><li>人类的大脑在处理信息时每秒钟能够计算 2 亿亿次。—— Chris Westbury，阿尔伯塔大学认知神经心理学家</li><li>在尝试影响他人时尽量减少内心活动。</li><li>顺势而为，按照需要调整目的和方法，当事情不能按照计划进行时不要死板。</li><li>情感几乎控制着每个人所做的每件事。</li><li>回报是一种固有的期望，指的是在他人对你好的时候你会给予友善的回应。</li><li>送出的不能是完全没有用的东西，必须是有价值的东西。</li><li>对接收者来说，礼物的价值越高或者越意外，受惠的感觉越强烈。</li><li>“礼物”必须完全免费，必须于对方具有很高的价值。</li><li>很多公司误以为以下物品是好的礼物：<ul><li>美丽夺目的公司宣传册；</li><li>无用的小玩具；</li><li>关于你的公司或产品的销售资料；</li></ul></li><li>为对方提供一条有价值的、会带来好处或者有用的信息会比实际的礼物更能引起对方的兴趣。</li><li>寻找适当的小机会送出一些信息，会突显你在接收者眼中的价值，更重要的是让接收者感激你。</li><li>义务就是基于社会、法律和道德要求，以及责任、合约或者承诺，人们认为必须要做的事。</li><li>当目标是客户服务人员时，通常可从义务入手进行攻击。</li><li>可以简单地通过高明的称赞来实行义务战术。例如，先称赞某个人，然后提出一个请求。</li><li>对别人友好，给他们需要的东西，甚至是简单的赞美，都能使他们觉得有义务帮你。</li><li>关于让步及其正确使用的基本原则：<ul><li>表明你让步；</li><li>要求和定义回报；</li><li>视情况做出让步；</li><li>分批做出让步；</li></ul></li><li>让步必须对接受方具有价值。</li><li>总体上来说，人们渴望得到那些难以企及的东西，因为这些东西看起来更有价值。别人的关注亦遵循这一规律。</li><li>稀缺制造出一种欲望，而欲望导致人们做出一些事后可能会后悔的决定。</li><li>要想“稀缺”发挥作用，要么这种稀缺是真的，要么就要坚持你的观点，让它看起来是真的。</li><li>对于真正需要的物品，人们会高估其价值。</li><li>如果信息是私有的、受限制的且难以得到，并且你愿意与他人分享，你在他们眼中就极具价值。</li><li>装扮成权威人物是社会工程人员混入公司的主要手段。</li><li>在适当的情况下，人们更可能对来自权威的主张作出快速的反应，即使这种所谓的权威根本未露面。—— 《The ‘Social Engineer’ of the Internet Fraud》，Jonathan J. Rusch</li><li>人们会受一小群采取同样行动的人的影响，这就是社会权威。</li><li>如果毫无防备地顺从权威，就会不顾现实地服从于权威符号。</li><li>言行一致降低了信息在处理的必要性，并且为作出复杂的决策提供了捷径。</li><li>要使大部分人采取特定的行动、透露信息或者泄露秘密，承诺和言行一致可能是很大的影响要素。</li><li>使用承诺和言行一致操纵他人的关键在于初始承诺。也就是在作出承诺、明确立场之后，人们会更加愿意同意那些和他们初始承诺一致的要求。—— 《影响力》</li><li>必须了解目标，这样才能成功装扮成目标期望的样子。服饰、发型及珠宝饰件都不要让目标震惊、惊讶或厌恶。让他感觉自然，慢慢创造出让他喜欢你的气氛，再通过构建信任关系走向成功。</li><li>一个人受到他人的恭维时，会倾向于继续谈话，以听到更多的肯定之言。这种恭维会增加目标的自我肯定，让他感觉你比其他人更了解他。</li><li>通过如下 4 步能够让人们喜欢你：<ol><li>自信而积极的态度；</li><li>建立共识；</li><li>与目标和环境保持同步一致；</li><li>有效地进行沟通。</li></ol></li><li>人们会在遇见他人的头两秒内决定是否喜欢这个人，要改变第一印象是很困难的。</li><li>具备良好的表达能力和不同场景的沟通技巧会让你更受欢迎。你表现出来的就是他们感觉到的。面部表情、肢体语言及着装等必须反应良好和积极的态度。</li><li>询问很多问题、主动聆听及对别人说的话题感兴趣等，这样的行为有助于让人们喜欢你。</li><li>预先录制的笑声对拙劣的笑话最有效。</li><li>社会认同的原则：我们确定什么事是正确的一种方法是看看其他人人为什么是正确的，如果在其它场合看到别人也做某件事，我们会更加坚信这样做是对的。</li><li>社会认同在以下两种情况下最具影响力：<ol><li>不确定：在人们不确定并且形势不明的情况下，他们更可能观察他人的行为，并认为这种行为是对的；</li><li>相似性：人们更倾向于跟随与自己类似的人的引导。</li></ol></li><li>影响和说服的艺术是让他人以你希望的方式想要去做、行动、思考或相信的过程。</li><li>为目标创造动机是社会工程的超级武器。</li><li>框架被定义为生活中的信息和经历，能够在人们必须作出决定的时候改变其反应的方式。</li><li>参考框架是一组看法、条件或假设，它们决定了人们如何接近、认知或理解某一事物。</li><li>框架必须与个人的核心信仰一致才能成功，除非你的目标是通过框架改变目标的核心信仰。</li><li>框架从来都不是从头构建出来的。框架总是根据已有文化符号提出的，涉及个人信仰和经验的核心。</li><li>框架桥接：就某一主题而言，思想上一致但结构上互不关联的两个或多个框架的联接。</li><li>理解目标的框架意味着知道他将如何对待你——不是如何对待社会工程人员，而是如何对待你伪装的角色。</li><li>框架放大是指对一个与某议题、问题或者一组事件有关的解释性框架进行阐述及激励。</li><li>通过省略、遗漏故事的细节，或者干脆不提这件事，媒体让人们得出了似乎是自己的结论，事实上这一结论来自媒体。</li><li>适当改变呈现、设定道德选择和价值困境的方式，会对人们的政治选择和政策产生意义深远的影响。</li><li>操纵的目的就是要战胜目标的批判性思维和自由意志。当目标基于熟悉的流程无法作出决定的时候，操纵的人可以给他灌输想法、价值观、态度或者道理。</li><li>动摇并深挖目标的信仰系统，这对控制目标采取你想要的行动会大有脾益。</li><li>人们会将特定的声音、行为与感觉和情绪相关联，形成条件反射。</li><li>在播放音乐的情况下，购物者在大卖场内的购物时间平均会增加 18%。</li><li>人们选择操纵他人的主要原因可以分成三类：<ol><li>金钱激励；</li><li>意识激励；</li><li>社会激励。</li></ol></li><li>不是所有的操纵都是恶意的，但要以正确的方法使用。</li><li>操纵并不是让人们喜欢你的所作所为并且感到舒服，而是强迫他们做你想要他们做的事。</li><li>操纵的一个目的是制造焦虑、紧张和过度的社会压力。</li><li>用恐惧、愤怒或者激动等情绪扰乱了目标之后，可以为他植入不同的信念。这些情绪会导致暗示接受性提高和判断力下降。</li><li>逐渐削弱目标的信念、意识或者对某一情形的情绪控制会让他不安。这一战术具有很强的负面效果，因为它让目标怀疑他通常认为是对的东西。</li><li>让目标感觉脆弱或者无能为力是另一种阴暗但很有效的战术。</li><li>让目标感觉没有时间思考或者情况特别紧急，也会让他觉得无能为力。</li><li>与让目标感到无能为力这一战术密切相关的就是让他们觉得内疚、耻辱、焦虑或者丧失特权。</li><li>如果让目标觉得完全无能为力，他就会认为向攻击者屈服是相当合理的。</li><li>不要让目标的表现影响你的情绪，这点非常重要。一旦让你的情绪介入其中，就是目标在操纵你了。你当然会产生情感，但是要控制自己的感觉并注意表露感情的方式。</li><li>你不能失去控制。你也要尽量控制负面情绪，这样才能始终控制局面。</li><li>必须从精神面貌上表现出你会得到想要的，这种信念会制造出新的肢体语言和面部表情，从而让你更好地伪装。</li><li>当想表达负面情况并且不想让目标重复时，就用过去时。利用这一技巧，可以将过去的负面态度和行为放到他的回忆中，给他一个“重新开始”的机会，让他为你做一些好事。</li><li>如果不事先思考如何处理潜在的交流障碍或者破坏性影响，而是等到临场发挥，则大多数情况下会出现问题。</li><li>理解什么会触发目标想要采取某一行动，并让目标觉得这一行动对他来说有好处——这就是影响力的用途。</li><li>物理安全是指企业或个人为保障安全所采取的不涉及计算机的措施，通常涉及锁、摄像机及窗户传感器等工具。</li><li>社会工程人员绝对不能使用录音录像设备故意去记录他人的窘态或窥探别人的隐私。</li><li>仅有工具是没有用的，掌握工具的功能并实际运用才是重点。</li><li>安全之本在于教育。—— Mati Aharoni</li><li>令自己和自己的故事可信，从而使目标的思维与你的思维一致，这是伪装的关键之一，能使你的伪装更加完美，并使目标对你的话深信不疑。</li><li>搜集的信息越多，就越容易发现漏洞，这是社交工程通向成功的道路。</li><li>必须提出有力的问题并抓住关键点来吸引目标的注意。</li><li>伪装需要创建一个现实的、能操纵目标感情和行为的角色。</li><li>不要轻易相信任何人。</li><li>思维不拘一格且快速切换是社会工程人员的标准技能。</li><li>预防和减轻社会工程攻击的 6 大步骤：<ol><li>学会识别社会工程攻击；</li><li>制定提高个人安全意识的计划；</li><li>充分认识社会工程人员意图获取的信息的价值；</li><li>及时更新软件；</li><li>编制参考指南；</li><li>从社会工程审计案例中吸取经验教训。</li></ol></li><li>不要等到攻击发生后才意识到它们的危害会有多严重。</li><li>一般来说，你越了解攻击的方式，就越容易识破它们。</li><li>在向某人提供信息前，要判断与你通话或者交涉的这个人是否有得到信息的权限和必要。</li><li>不管对话的哪个阶段，都要思量你打算透露的信息的价值。</li><li>社会工程审计的基本定义：雇佣专业安全人员模仿恶意社会工程人员所使用的攻击方式对企业中的人、规章以及物理环境所进行的安全测试。</li><li>恶意社会工程人员与专业安全审计人员主要有三点不同：<ol><li>通常，专业的安全审计人员会遵循道德与法律上的约束；</li><li>专业安全审计人员的目的是帮助客户，而不是窃取客户资料、使客户陷入窘境或者伤害客户；</li><li>专业的安全审计有一定的范围限制，而真正的攻击者则不受这些限制。</li></ol></li><li>制定审查目标时，针对关键方面列出从 0 到 10 不等的强度等级：<ul><li>判断员工是否会点击或打开来自陌生人邮件中的链接或文件；</li><li>判断员工是否会登录某个网站，输入个人或业务相关的信息；</li><li>判断通过电话或者在工作场所或个人场所面对面的交流可以从员工口中获取多少信息；</li><li>判断办公环境中的锁、摄像头、传感器和门卫的安全等级；</li><li>确定社会工程人员是否有能力构建一个恶意 U 盘或 DVD，并诱导员工把它用在工作电脑上。</li></ul></li><li>在策划攻击时，需要极力避免以下几点：<ul><li>攻击目标的家人和朋友；</li><li>伪造犯罪或不忠的证据，让目标名誉扫地；</li><li>根据当地的法律，冒充执法人员可能是违法的；</li><li>闯入目标的家；</li><li>利用目标的风流韵事或窘迫状况进行敲诈。</li></ul></li><li>如果不将知识用于实践，它就没有任何价值。—— Anton Chekhov</li><li>好的伪装并不是纯粹的说谎和编故事，而是在短时间内变身成为所伪装的角色。你的一切，包括想法、动作、说话方式和动机，都应该体现所伪装角色的特征。如果你做得足够好，就会取得目标的信任。</li><li>积极地利用恐惧，切忌生气和消沉。制定一个改变自我的计划，然后培训自己、家人和员工，学会观察、提防和防御社会工程攻击。</li><li>许多公司从未对呼叫中心和技术支持部门做过正式、认真的社会工程安全培训，而这些部门常常是社会工程攻击的首选目标。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/featured_social_engineering.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：【】部分为笔者心得，非原文摘抄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;必须置身事外才能全面地理解安全，</summary>
      
    
    
    
    <category term="阅读" scheme="https://captnotes.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
</feed>
